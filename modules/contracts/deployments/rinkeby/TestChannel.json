{
  "address": "0x51c7B4CFe812Ee393216Dd0F5E9512cbb7511B46",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AliceDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "defunder",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "alice",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bob",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "assetIds",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "amount",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "address payable[2]",
                  "name": "to",
                  "type": "address[2]"
                }
              ],
              "internalType": "struct Balance[]",
              "name": "balances",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "processedDepositsA",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "processedDepositsB",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "defundNonces",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "timeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct ICMCAdjudicator.CoreChannelState",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "channelStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "consensusExpiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defundExpiry",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ICMCAdjudicator.ChannelDispute",
          "name": "dispute",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assetIds",
          "type": "address[]"
        }
      ],
      "name": "ChannelDefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "disputer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "alice",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bob",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "assetIds",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "amount",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "address payable[2]",
                  "name": "to",
                  "type": "address[2]"
                }
              ],
              "internalType": "struct Balance[]",
              "name": "balances",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "processedDepositsA",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "processedDepositsB",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "defundNonces",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "timeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct ICMCAdjudicator.CoreChannelState",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "channelStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "consensusExpiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defundExpiry",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ICMCAdjudicator.ChannelDispute",
          "name": "dispute",
          "type": "tuple"
        }
      ],
      "name": "ChannelDisputed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "defunder",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "transferId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "transferDefinition",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "responder",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetId",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "amount",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "address payable[2]",
                  "name": "to",
                  "type": "address[2]"
                }
              ],
              "internalType": "struct Balance",
              "name": "balance",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "transferTimeout",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initialStateHash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct ICMCAdjudicator.CoreTransferState",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "transferStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "transferDisputeExpiry",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isDefunded",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ICMCAdjudicator.TransferDispute",
          "name": "dispute",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedInitialState",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedResolver",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "amount",
              "type": "uint256[2]"
            },
            {
              "internalType": "address payable[2]",
              "name": "to",
              "type": "address[2]"
            }
          ],
          "indexed": false,
          "internalType": "struct Balance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "name": "TransferDefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "disputer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "transferId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "transferDefinition",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "responder",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetId",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "amount",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "address payable[2]",
                  "name": "to",
                  "type": "address[2]"
                }
              ],
              "internalType": "struct Balance",
              "name": "balance",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "transferTimeout",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initialStateHash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct ICMCAdjudicator.CoreTransferState",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "transferStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "transferDisputeExpiry",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isDefunded",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ICMCAdjudicator.TransferDispute",
          "name": "dispute",
          "type": "tuple"
        }
      ],
      "name": "TransferDisputed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "alice",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bob",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "assetIds",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "amount",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "address payable[2]",
                  "name": "to",
                  "type": "address[2]"
                }
              ],
              "internalType": "struct Balance[]",
              "name": "balances",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "processedDepositsA",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "processedDepositsB",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "defundNonces",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "timeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ICMCAdjudicator.CoreChannelState",
          "name": "ccs",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "assetIds",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "defundChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "transferId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "transferDefinition",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "responder",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetId",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "amount",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "address payable[2]",
                  "name": "to",
                  "type": "address[2]"
                }
              ],
              "internalType": "struct Balance",
              "name": "balance",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "transferTimeout",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initialStateHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ICMCAdjudicator.CoreTransferState",
          "name": "cts",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "encodedInitialTransferState",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "encodedTransferResolver",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "responderSignature",
          "type": "bytes"
        }
      ],
      "name": "defundTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositAlice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "alice",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bob",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "assetIds",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "amount",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "address payable[2]",
                  "name": "to",
                  "type": "address[2]"
                }
              ],
              "internalType": "struct Balance[]",
              "name": "balances",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "processedDepositsA",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "processedDepositsB",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "defundNonces",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "timeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ICMCAdjudicator.CoreChannelState",
          "name": "ccs",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "aliceSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "bobSignature",
          "type": "bytes"
        }
      ],
      "name": "disputeChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "transferId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "transferDefinition",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "responder",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetId",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "amount",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "address payable[2]",
                  "name": "to",
                  "type": "address[2]"
                }
              ],
              "internalType": "struct Balance",
              "name": "balance",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "transferTimeout",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initialStateHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ICMCAdjudicator.CoreTransferState",
          "name": "cts",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProofData",
          "type": "bytes32[]"
        }
      ],
      "name": "disputeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAlice",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBob",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChannelDispute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "channelStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "consensusExpiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defundExpiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICMCAdjudicator.ChannelDispute",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "getDefundNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getExitableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "getTotalDepositsAlice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "getTotalDepositsBob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "getTotalTransferred",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        }
      ],
      "name": "getTransferDispute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "transferStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "transferDisputeExpiry",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isDefunded",
              "type": "bool"
            }
          ],
          "internalType": "struct ICMCAdjudicator.TransferDispute",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetId",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct WithdrawData",
          "name": "wd",
          "type": "tuple"
        }
      ],
      "name": "getWithdrawalTransactionRecord",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alice",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bob",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "amount",
              "type": "uint256[2]"
            },
            {
              "internalType": "address payable[2]",
              "name": "to",
              "type": "address[2]"
            }
          ],
          "internalType": "struct Balance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "name": "testMakeBalanceExitable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "testMakeExitable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetId",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct WithdrawData",
          "name": "wd",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "aliceSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "bobSignature",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x12e939da6f1af25a12331fbc039cd15e15b96606cc63fac8840cedf0eea0a0f3",
  "receipt": {
    "to": null,
    "from": "0x6E137983f0B260BAD708b4FAef30cba5a74E69AA",
    "contractAddress": "0x51c7B4CFe812Ee393216Dd0F5E9512cbb7511B46",
    "transactionIndex": 9,
    "gasUsed": "3627600",
    "logsBloom": "0x
    "blockHash": "0xd09e476821ffd116e1f16d44764b16ef13983b6cafbe9ffe45c4c4b5e411b6a7",
    "transactionHash": "0x12e939da6f1af25a12331fbc039cd15e15b96606cc63fac8840cedf0eea0a0f3",
    "logs": [],
    "blockNumber": 7757805,
    "cumulativeGasUsed": "7682847",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e64b9cdf4f72778a3c3a9b0d6a298f3c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AliceDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defunder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"alice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bob\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assetIds\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"internalType\":\"struct Balance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"processedDepositsA\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"processedDepositsB\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"defundNonces\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ICMCAdjudicator.CoreChannelState\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"channelStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"consensusExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defundExpiry\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ICMCAdjudicator.ChannelDispute\",\"name\":\"dispute\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetIds\",\"type\":\"address[]\"}],\"name\":\"ChannelDefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"alice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bob\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assetIds\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"internalType\":\"struct Balance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"processedDepositsA\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"processedDepositsB\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"defundNonces\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ICMCAdjudicator.CoreChannelState\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"channelStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"consensusExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defundExpiry\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ICMCAdjudicator.ChannelDispute\",\"name\":\"dispute\",\"type\":\"tuple\"}],\"name\":\"ChannelDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defunder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"transferDefinition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"responder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"internalType\":\"struct Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferTimeout\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialStateHash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ICMCAdjudicator.CoreTransferState\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transferStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferDisputeExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDefunded\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ICMCAdjudicator.TransferDispute\",\"name\":\"dispute\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedInitialState\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedResolver\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"indexed\":false,\"internalType\":\"struct Balance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"name\":\"TransferDefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"transferDefinition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"responder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"internalType\":\"struct Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferTimeout\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialStateHash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ICMCAdjudicator.CoreTransferState\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transferStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferDisputeExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDefunded\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ICMCAdjudicator.TransferDispute\",\"name\":\"dispute\",\"type\":\"tuple\"}],\"name\":\"TransferDisputed\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"alice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bob\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assetIds\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"internalType\":\"struct Balance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"processedDepositsA\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"processedDepositsB\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"defundNonces\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ICMCAdjudicator.CoreChannelState\",\"name\":\"ccs\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"assetIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"defundChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"transferDefinition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"responder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"internalType\":\"struct Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferTimeout\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialStateHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ICMCAdjudicator.CoreTransferState\",\"name\":\"cts\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"encodedInitialTransferState\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedTransferResolver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"responderSignature\",\"type\":\"bytes\"}],\"name\":\"defundTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAlice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"alice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bob\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assetIds\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"internalType\":\"struct Balance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"processedDepositsA\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"processedDepositsB\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"defundNonces\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ICMCAdjudicator.CoreChannelState\",\"name\":\"ccs\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"aliceSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bobSignature\",\"type\":\"bytes\"}],\"name\":\"disputeChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"transferDefinition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"responder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"internalType\":\"struct Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferTimeout\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialStateHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ICMCAdjudicator.CoreTransferState\",\"name\":\"cts\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProofData\",\"type\":\"bytes32[]\"}],\"name\":\"disputeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAlice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBob\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChannelDispute\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"channelStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"consensusExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defundExpiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ICMCAdjudicator.ChannelDispute\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"getDefundNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getExitableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"getTotalDepositsAlice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"getTotalDepositsBob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"getTotalTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"getTransferDispute\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transferStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferDisputeExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDefunded\",\"type\":\"bool\"}],\"internalType\":\"struct ICMCAdjudicator.TransferDispute\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct WithdrawData\",\"name\":\"wd\",\"type\":\"tuple\"}],\"name\":\"getWithdrawalTransactionRecord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bob\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"amount\",\"type\":\"uint256[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"to\",\"type\":\"address[2]\"}],\"internalType\":\"struct Balance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"name\":\"testMakeBalanceExitable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"testMakeExitable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct WithdrawData\",\"name\":\"wd\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"aliceSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bobSignature\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Layne Haber <layne@connext.network>\",\"kind\":\"dev\",\"methods\":{\"getAlice()\":{\"returns\":{\"_0\":\"Bob's signer address\"}},\"getBob()\":{\"returns\":{\"_0\":\"Alice's signer address\"}},\"setup(address,address)\":{\"params\":{\"_alice\":\": Address representing user with function deposit\",\"_bob\":\": Address representing user with multisig deposit\"}},\"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)\":{\"params\":{\"aliceSignature\":\"Signature of owner a\",\"bobSignature\":\"Signature of owner b\",\"wd\":\"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce.\"}}},\"title\":\"TestChannel\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAlice()\":{\"notice\":\"A getter function for the bob of the multisig\"},\"getBob()\":{\"notice\":\"A getter function for the bob of the multisig\"},\"setup(address,address)\":{\"notice\":\"Contract constructor for Proxied copies\"}},\"notice\":\"This contract will help test the `ChannelMastercopy` contract and         the associated bits of functionality. This contract should *only*         contain aliases to internal functions that should be unit-tested,         like the `makeExitable` call on `CMCAsset.sol`. Using this         contract will help reduce the amount of boilerplate needed to test         component functionality. For example, `CMCAsset.sol` is only         able to be tested via the adjudicator in many practical cases.         Creating a helper function allows for easier testing of only         that functionality.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src.sol/testing/TestChannel.sol\":\"TestChannel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\",\"license\":\"MIT\"},\"@openzeppelin/contracts/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x4959be2683e7af3439cb94f06aa6c40cb42ca9336747d0c7dce54f07196489bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"src.sol/CMCAdjudicator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/Commitment.sol\\\";\\nimport \\\"./interfaces/ICMCAdjudicator.sol\\\";\\nimport \\\"./interfaces/ITransferDefinition.sol\\\";\\nimport \\\"./interfaces/Types.sol\\\";\\nimport \\\"./CMCCore.sol\\\";\\nimport \\\"./CMCAsset.sol\\\";\\nimport \\\"./CMCDeposit.sol\\\";\\nimport \\\"./lib/LibChannelCrypto.sol\\\";\\nimport \\\"./lib/LibMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// @title CMCAdjudicator\\n/// @author Connext <support@connext.network>\\n/// @notice Contains logic for disputing a single channel and all active\\n///         transfers associated with the channel. Contains two major phases:\\n///         (1) consensus: settle on latest channel state\\n///         (2) defund: remove assets and dispute active transfers\\ncontract CMCAdjudicator is CMCCore, CMCAsset, CMCDeposit, ICMCAdjudicator {\\n    using LibChannelCrypto for bytes32;\\n    using LibMath for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 private constant INITIAL_DEFUND_NONCE = 1;\\n\\n    ChannelDispute private channelDispute;\\n    mapping(address => uint256) private defundNonces;\\n    mapping(bytes32 => TransferDispute) private transferDisputes;\\n\\n    modifier validateChannel(CoreChannelState calldata ccs) {\\n        require(\\n            ccs.channelAddress == address(this) &&\\n                ccs.alice == alice &&\\n                ccs.bob == bob,\\n            \\\"CMCAdjudicator: INVALID_CHANNEL\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validateTransfer(CoreTransferState calldata cts) {\\n        require(\\n            cts.channelAddress == address(this),\\n            \\\"CMCAdjudicator: INVALID_TRANSFER\\\"\\n        );\\n        _;\\n    }\\n\\n    function getChannelDispute()\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (ChannelDispute memory)\\n    {\\n        return channelDispute;\\n    }\\n\\n    function getDefundNonce(address assetId)\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (uint256)\\n    {\\n        return defundNonces[assetId];\\n    }\\n\\n    function getTransferDispute(bytes32 transferId)\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (TransferDispute memory)\\n    {\\n        return transferDisputes[transferId];\\n    }\\n\\n    function disputeChannel(\\n        CoreChannelState calldata ccs,\\n        bytes calldata aliceSignature,\\n        bytes calldata bobSignature\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\n        // Generate hash\\n        bytes32 ccsHash = hashChannelState(ccs);\\n\\n        // Verify Alice's and Bob's signature on the channel state\\n        verifySignaturesOnChannelStateHash(ccs, ccsHash, aliceSignature, bobSignature);\\n\\n        // We cannot dispute a channel in its defund phase\\n        require(!inDefundPhase(), \\\"CMCAdjudicator: INVALID_PHASE\\\");\\n\\n        // New nonce must be strictly greater than the stored one\\n        require(\\n            channelDispute.nonce < ccs.nonce,\\n            \\\"CMCAdjudicator: INVALID_NONCE\\\"\\n        );\\n\\n        if (!inConsensusPhase()) {\\n            // We are not already in a dispute\\n            // Set expiries\\n            // TODO: offchain-ensure that there can't be an overflow\\n            channelDispute.consensusExpiry = block.timestamp.add(ccs.timeout);\\n            channelDispute.defundExpiry = block.timestamp.add(\\n                ccs.timeout.mul(2)\\n            );\\n        }\\n\\n        // Store newer state\\n        channelDispute.channelStateHash = ccsHash;\\n        channelDispute.nonce = ccs.nonce;\\n        channelDispute.merkleRoot = ccs.merkleRoot;\\n\\n        // Emit event\\n        emit ChannelDisputed(msg.sender, ccs, channelDispute);\\n    }\\n\\n    function defundChannel(\\n        CoreChannelState calldata ccs,\\n        address[] calldata assetIds,\\n        uint256[] calldata indices\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\n        // These checks are not strictly necessary, but it's a bit cleaner this way\\n        require(assetIds.length > 0, \\\"CMCAdjudicator: NO_ASSETS_GIVEN\\\");\\n        require(\\n            indices.length <= assetIds.length,\\n            \\\"CMCAdjudicator: WRONG_ARRAY_LENGTHS\\\"\\n        );\\n\\n        // Verify that the given channel state matches the stored one\\n        require(\\n            hashChannelState(ccs) == channelDispute.channelStateHash,\\n            \\\"CMCAdjudicator: INVALID_CHANNEL_HASH\\\"\\n        );\\n\\n        // We need to be in defund phase for that\\n        require(inDefundPhase(), \\\"CMCAdjudicator: INVALID_PHASE\\\");\\n\\n        // TODO SECURITY: Beware of reentrancy\\n        // TODO: offchain-ensure that all arrays have the same length:\\n        // assetIds, balances, processedDepositsA, processedDepositsB, defundNonces\\n        // Make sure there are no duplicates in the assetIds -- duplicates are often a source of double-spends\\n\\n        // Defund all assets given\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            address assetId = assetIds[i];\\n\\n            // Verify or find the index of the assetId in the ccs.assetIds\\n            uint256 index;\\n            if (i < indices.length) {\\n                // The index was supposedly given -- we verify\\n                index = indices[i];\\n                require(\\n                    assetId == ccs.assetIds[index],\\n                    \\\"CMCAdjudicator: INDEX_MISMATCH\\\"\\n                );\\n            } else {\\n                // we search through the assets in ccs\\n                for (index = 0; index < ccs.assetIds.length; index++) {\\n                    if (assetId == ccs.assetIds[index]) {\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            // Now, if `index`  is equal to the number of assets in ccs,\\n            // then the current asset is not in ccs;\\n            // otherwise, `index` is the index in ccs for the current asset\\n\\n            // Check the assets haven't already been defunded + update the\\n            // defundNonce for that asset\\n            {\\n                // Open a new block to avoid \\\"stack too deep\\\" error\\n                uint256 defundNonce =\\n                    (index == ccs.assetIds.length)\\n                        ? INITIAL_DEFUND_NONCE\\n                        : ccs.defundNonces[index];\\n                require(\\n                    defundNonces[assetId] < defundNonce,\\n                    \\\"CMCAdjudicator: CHANNEL_ALREADY_DEFUNDED\\\"\\n                );\\n                defundNonces[assetId] = defundNonce;\\n            }\\n\\n            // Get total deposits\\n            uint256 tdAlice = _getTotalDepositsAlice(assetId);\\n            uint256 tdBob = _getTotalDepositsBob(assetId);\\n\\n            Balance memory balance;\\n\\n            if (index == ccs.assetIds.length) {\\n                // The current asset is not a part of ccs; refund what has been deposited\\n                balance = Balance({\\n                    amount: [tdAlice, tdBob],\\n                    to: [payable(ccs.alice), payable(ccs.bob)]\\n                });\\n            } else {\\n                // Start with the final balances in ccs\\n                balance = ccs.balances[index];\\n                // Add unprocessed deposits\\n                balance.amount[0] = balance.amount[0].satAdd(\\n                    tdAlice - ccs.processedDepositsA[index]\\n                );\\n                balance.amount[1] = balance.amount[1].satAdd(\\n                    tdBob - ccs.processedDepositsB[index]\\n                );\\n            }\\n\\n            // Add result to exitable amounts\\n            makeBalanceExitable(assetId, balance);\\n        }\\n\\n        emit ChannelDefunded(\\n            msg.sender,\\n            ccs,\\n            channelDispute,\\n            assetIds\\n        );\\n    }\\n\\n    function disputeTransfer(\\n        CoreTransferState calldata cts,\\n        bytes32[] calldata merkleProofData\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\n        // Verify that the given transfer state is included in the \\\"finalized\\\" channel state\\n        bytes32 transferStateHash = hashTransferState(cts);\\n        verifyMerkleProof(\\n            merkleProofData,\\n            channelDispute.merkleRoot,\\n            transferStateHash\\n        );\\n\\n        // The channel needs to be in defund phase for that, i.e. channel state is \\\"finalized\\\"\\n        require(inDefundPhase(), \\\"CMCAdjudicator: INVALID_PHASE\\\");\\n\\n        // Get stored dispute for this transfer\\n        TransferDispute storage transferDispute =\\n            transferDisputes[cts.transferId];\\n\\n        // Verify that this transfer has not been disputed before\\n        require(\\n            transferDispute.transferDisputeExpiry == 0,\\n            \\\"CMCAdjudicator: TRANSFER_ALREADY_DISPUTED\\\"\\n        );\\n\\n        // Store transfer state and set expiry\\n        transferDispute.transferStateHash = transferStateHash;\\n        // TODO: offchain-ensure that there can't be an overflow\\n        transferDispute.transferDisputeExpiry = block.timestamp.add(\\n            cts.transferTimeout\\n        );\\n\\n        emit TransferDisputed(\\n            msg.sender,\\n            cts,\\n            transferDispute\\n        );\\n    }\\n\\n    function defundTransfer(\\n        CoreTransferState calldata cts,\\n        bytes calldata encodedInitialTransferState,\\n        bytes calldata encodedTransferResolver,\\n        bytes calldata responderSignature\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\n        // Get stored dispute for this transfer\\n        TransferDispute storage transferDispute =\\n            transferDisputes[cts.transferId];\\n\\n        // Verify that a dispute for this transfer has already been started\\n        require(\\n            transferDispute.transferDisputeExpiry != 0,\\n            \\\"CMCAdjudicator: TRANSFER_NOT_DISPUTED\\\"\\n        );\\n\\n        // Verify that the given transfer state matches the stored one\\n        require(\\n            hashTransferState(cts) == transferDispute.transferStateHash,\\n            \\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\"\\n        );\\n\\n        // We can't defund twice\\n        require(\\n            !transferDispute.isDefunded,\\n            \\\"CMCAdjudicator: TRANSFER_ALREADY_DEFUNDED\\\"\\n        );\\n        transferDispute.isDefunded = true;\\n\\n        Balance memory balance;\\n\\n        if (block.timestamp < transferDispute.transferDisputeExpiry) {\\n            // Ensure the correct hash is provided\\n            require(\\n                keccak256(encodedInitialTransferState) == cts.initialStateHash,\\n                \\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\"\\n            );\\n            \\n            // Before dispute expiry, responder or responder-authorized\\n            // agent (i.e. watchtower) can resolve\\n            require(\\n                msg.sender == cts.responder || cts.initialStateHash.checkSignature(responderSignature, cts.responder),\\n                \\\"CMCAdjudicator: INVALID_RESOLVER\\\"\\n            );\\n            \\n            ITransferDefinition transferDefinition =\\n                ITransferDefinition(cts.transferDefinition);\\n            balance = transferDefinition.resolve(\\n                abi.encode(cts.balance),\\n                encodedInitialTransferState,\\n                encodedTransferResolver\\n            );\\n            // Verify that returned balances don't exceed initial balances\\n            require(\\n                balance.amount[0].add(balance.amount[1]) <=\\n                    cts.balance.amount[0].add(cts.balance.amount[1]),\\n                \\\"CMCAdjudicator: INVALID_BALANCES\\\"\\n            );\\n        } else {\\n            // After dispute expiry, if the responder hasn't resolved, we defund the initial balance\\n            balance = cts.balance;\\n        }\\n\\n        // Depending on previous code path, defund either resolved or initial balance\\n        makeBalanceExitable(cts.assetId, balance);\\n\\n        // Emit event\\n        emit TransferDefunded(\\n            msg.sender,\\n            cts,\\n            transferDispute,\\n            encodedInitialTransferState,\\n            encodedTransferResolver,\\n            balance\\n        );\\n    }\\n\\n    function verifySignaturesOnChannelStateHash(\\n        CoreChannelState calldata ccs,\\n        bytes32 ccsHash,\\n        bytes calldata aliceSignature,\\n        bytes calldata bobSignature\\n    ) internal pure {\\n        bytes32 commitment =\\n            keccak256(abi.encode(CommitmentType.ChannelState, ccsHash));\\n        require(\\n            commitment.checkSignature(aliceSignature, ccs.alice),\\n            \\\"CMCAdjudicator: INVALID_ALICE_SIG\\\"\\n        );\\n        require(\\n            commitment.checkSignature(bobSignature, ccs.bob),\\n            \\\"CMCAdjudicator: INVALID_BOB_SIG\\\"\\n        );\\n    }\\n\\n    function verifyMerkleProof(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure {\\n        require(\\n            MerkleProof.verify(proof, root, leaf),\\n            \\\"CMCAdjudicator: INVALID_MERKLE_PROOF\\\"\\n        );\\n    }\\n\\n    function inConsensusPhase() internal view returns (bool) {\\n        return block.timestamp < channelDispute.consensusExpiry;\\n    }\\n\\n    function inDefundPhase() internal view returns (bool) {\\n        return\\n            channelDispute.consensusExpiry <= block.timestamp &&\\n            block.timestamp < channelDispute.defundExpiry;\\n    }\\n\\n    function hashChannelState(CoreChannelState calldata ccs)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(ccs));\\n    }\\n\\n    function hashTransferState(CoreTransferState calldata cts)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(cts));\\n    }\\n}\\n\",\"keccak256\":\"0x351fb7770cbb6fbb6f3470e63d5a9e93c817722f9c8e2e5c62e38ebf8c6e389b\",\"license\":\"UNLICENSED\"},\"src.sol/CMCAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ICMCAsset.sol\\\";\\nimport \\\"./interfaces/Types.sol\\\";\\nimport \\\"./CMCCore.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"./lib/LibMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title CMCAsset\\n/// @author Connext <support@connext.network>\\n/// @notice Contains logic to safely transfer channel assets (even if they are\\n///         noncompliant). During adjudication, balances from defunding the\\n///         channel or defunding transfers are registered as withdrawable. Once\\n///         they are registered, the owner (or a watchtower on behalf of the\\n///         owner), may call `exit` to reclaim funds from the multisig.\\n\\ncontract CMCAsset is CMCCore, ICMCAsset {\\n    using SafeMath for uint256;\\n    using LibMath for uint256;\\n\\n    mapping(address => uint256) internal totalTransferred;\\n    mapping(address => mapping(address => uint256))\\n        private exitableAmount;\\n\\n    function registerTransfer(address assetId, uint256 amount) internal {\\n        totalTransferred[assetId] += amount;\\n    }\\n\\n    function getTotalTransferred(address assetId)\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (uint256)\\n    {\\n        return totalTransferred[assetId];\\n    }\\n\\n    function makeExitable(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        exitableAmount[assetId][\\n            recipient\\n        ] = exitableAmount[assetId][recipient].satAdd(amount);\\n    }\\n\\n    function makeBalanceExitable(\\n        address assetId,\\n        Balance memory balance\\n    ) internal {\\n        for (uint256 i = 0; i < 2; i++) {\\n            uint256 amount = balance.amount[i];\\n            if (amount > 0) {\\n                makeExitable(assetId, balance.to[i], amount);\\n            }\\n        }\\n    }\\n\\n    function getExitableAmount(address assetId, address owner)\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (uint256)\\n    {\\n        return exitableAmount[assetId][owner];\\n    }\\n\\n    function getAvailableAmount(address assetId, uint256 maxAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Taking the min protects against the case where the multisig\\n        // holds less than the amount that is trying to be withdrawn\\n        // while still allowing the total of the funds to be removed\\n        // without the transaction reverting.\\n        return Math.min(maxAmount, LibAsset.getOwnBalance(assetId));\\n    }\\n\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n        registerTransfer(assetId, amount);\\n        require(\\n            LibAsset.unregisteredTransfer(assetId, recipient, amount),\\n            \\\"CMCAsset: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function exit(\\n        address assetId,\\n        address owner,\\n        address payable recipient\\n    ) external override onlyViaProxy nonReentrant {\\n        // Either the owner must be the recipient, or in control\\n        // of setting the recipient of the funds to whomever they\\n        // choose\\n        require(\\n            msg.sender == owner || owner == recipient,\\n            \\\"CMCAsset: OWNER_MISMATCH\\\"\\n        );\\n\\n        uint256 amount =\\n            getAvailableAmount(\\n                assetId,\\n                exitableAmount[assetId][owner]\\n            );\\n\\n        // Revert if amount is 0\\n        require(amount > 0, \\\"CMCAsset: NO_OP\\\");\\n\\n        // Reduce the amount claimable from the multisig by the owner\\n        exitableAmount[assetId][\\n            owner\\n        ] = exitableAmount[assetId][owner].sub(amount);\\n\\n        // Perform transfer\\n        transferAsset(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x39c1bd81d8ec2a0fa7c23aad683017f5e2ec28a2db43643020649f935b5b74bf\",\"license\":\"UNLICENSED\"},\"src.sol/CMCCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ICMCCore.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\n/// @title CMCCore\\n/// @author Connext <support@connext.network>\\n/// @notice Contains logic pertaining to the participants of a channel,\\n///         including setting and retrieving the participants and the\\n///         mastercopy.\\n\\ncontract CMCCore is ReentrancyGuard, ICMCCore {\\n    address private immutable mastercopyAddress;\\n\\n    address internal alice;\\n    address internal bob;\\n\\n    /// @notice Set invalid participants to block the mastercopy from being used directly\\n    ///         Nonzero address also prevents the mastercopy from being setup\\n    ///         Only setting alice is sufficient, setting bob too wouldn't change anything\\n    constructor() {\\n        mastercopyAddress = address(this);\\n    }\\n\\n    // Prevents us from calling methods directly from the mastercopy contract\\n    modifier onlyViaProxy {\\n        require(\\n            address(this) != mastercopyAddress,\\n            \\\"Mastercopy: ONLY_VIA_PROXY\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Contract constructor for Proxied copies\\n    /// @param _alice: Address representing user with function deposit\\n    /// @param _bob: Address representing user with multisig deposit\\n    function setup(address _alice, address _bob)\\n        external\\n        override\\n        onlyViaProxy\\n    {\\n        require(alice == address(0), \\\"CMCCore: ALREADY_SETUP\\\");\\n        require(\\n            _alice != address(0) && _bob != address(0),\\n            \\\"CMCCore: INVALID_PARTICIPANT\\\"\\n        );\\n        require(_alice != _bob, \\\"CMCCore: IDENTICAL_PARTICIPANTS\\\");\\n        ReentrancyGuard.setup();\\n        alice = _alice;\\n        bob = _bob;\\n    }\\n\\n    /// @notice A getter function for the bob of the multisig\\n    /// @return Bob's signer address\\n    function getAlice()\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (address)\\n    {\\n        return alice;\\n    }\\n\\n    /// @notice A getter function for the bob of the multisig\\n    /// @return Alice's signer address\\n    function getBob()\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (address)\\n    {\\n        return bob;\\n    }\\n}\\n\",\"keccak256\":\"0x37324d80a19f1feb6e413fe6a41d82b5dba38bca62e0e05ae6f420000dd93c53\",\"license\":\"UNLICENSED\"},\"src.sol/CMCDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ICMCDeposit.sol\\\";\\nimport \\\"./CMCCore.sol\\\";\\nimport \\\"./CMCAsset.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"./lib/LibERC20.sol\\\";\\n\\n/// @title CMCDeposit\\n/// @author Connext <support@connext.network>\\n/// @notice Contains logic supporting channel multisig deposits. Channel\\n///         funding is asymmetric, with `alice` having to call a deposit\\n///         function which tracks the total amount she has deposited so far,\\n///         and any other funds in the multisig being attributed to `bob`.\\n\\ncontract CMCDeposit is CMCCore, CMCAsset, ICMCDeposit {\\n    mapping(address => uint256) private depositsAlice;\\n\\n    receive() external payable onlyViaProxy nonReentrant {}\\n\\n    function getTotalDepositsAlice(address assetId)\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (uint256)\\n    {\\n        return _getTotalDepositsAlice(assetId);\\n    }\\n\\n    function _getTotalDepositsAlice(address assetId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return depositsAlice[assetId];\\n    }\\n\\n    function getTotalDepositsBob(address assetId)\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (uint256)\\n    {\\n        return _getTotalDepositsBob(assetId);\\n    }\\n\\n    // Calculated using invariant onchain properties. Note we DONT use safemath here\\n    function _getTotalDepositsBob(address assetId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LibAsset.getOwnBalance(assetId) +\\n            totalTransferred[assetId] -\\n            depositsAlice[assetId];\\n    }\\n\\n    function depositAlice(address assetId, uint256 amount)\\n        external\\n        payable\\n        override\\n        onlyViaProxy\\n        nonReentrant\\n    {\\n        if (LibAsset.isEther(assetId)) {\\n            require(msg.value == amount, \\\"CMCDeposit: VALUE_MISMATCH\\\");\\n        } else {\\n            require(\\n                LibERC20.transferFrom(\\n                    assetId,\\n                    msg.sender,\\n                    address(this),\\n                    amount\\n                ),\\n                \\\"CMCDeposit: ERC20_TRANSFER_FAILED\\\"\\n            );\\n        }\\n        // NOTE: explicitly do NOT use safemath here\\n        depositsAlice[assetId] += amount;\\n        emit AliceDeposited(assetId, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9f7a62e0b6c4e98e0877d236319f727575e47b8240c4fe56093f81842baff5d2\",\"license\":\"UNLICENSED\"},\"src.sol/CMCWithdraw.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/Commitment.sol\\\";\\nimport \\\"./interfaces/ICMCWithdraw.sol\\\";\\nimport \\\"./interfaces/WithdrawHelper.sol\\\";\\nimport \\\"./CMCCore.sol\\\";\\nimport \\\"./CMCAsset.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"./lib/LibChannelCrypto.sol\\\";\\nimport \\\"./lib/LibUtils.sol\\\";\\n\\n/// @title CMCWithdraw\\n/// @author Connext <support@connext.network>\\n/// @notice Contains logic for all cooperative channel multisig withdrawals.\\n///         Cooperative withdrawal commitments must be signed by both channel\\n///         participants. As part of the channel withdrawals, an arbitrary\\n///         call can be made, which is extracted from the withdraw data.\\n\\ncontract CMCWithdraw is CMCCore, CMCAsset, ICMCWithdraw {\\n    using LibChannelCrypto for bytes32;\\n\\n    mapping(bytes32 => bool) private isExecuted;\\n\\n    modifier validateWithdrawData(WithdrawData calldata wd) {\\n        require(\\n            wd.channelAddress == address(this),\\n            \\\"CMCWithdraw: CHANNEL_MISMATCH\\\"\\n        );\\n        _;\\n    }\\n\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (bool)\\n    {\\n        return isExecuted[hashWithdrawData(wd)];\\n    }\\n\\n    /// @param wd The withdraw data consisting of\\n    /// semantic withdraw information, i.e. assetId, recipient, and amount;\\n    /// information to make an optional call in addition to the actual transfer,\\n    /// i.e. target address for the call and call payload;\\n    /// additional information, i.e. channel address and nonce.\\n    /// @param aliceSignature Signature of owner a\\n    /// @param bobSignature Signature of owner b\\n    function withdraw(\\n        WithdrawData calldata wd,\\n        bytes calldata aliceSignature,\\n        bytes calldata bobSignature\\n    ) external override onlyViaProxy nonReentrant validateWithdrawData(wd) {\\n        // Generate hash\\n        bytes32 wdHash = hashWithdrawData(wd);\\n\\n        // Verify Alice's and Bob's signature on the withdraw data\\n        verifySignaturesOnWithdrawDataHash(wdHash, aliceSignature, bobSignature);\\n\\n        // Replay protection\\n        require(!isExecuted[wdHash], \\\"CMCWithdraw: ALREADY_EXECUTED\\\");\\n        isExecuted[wdHash] = true;\\n\\n        // Determine actually transferable amount\\n        uint256 actualAmount = getAvailableAmount(wd.assetId, wd.amount);\\n\\n        // Revert if actualAmount is zero && callTo is 0\\n        require(\\n            actualAmount > 0 || wd.callTo != address(0),\\n            \\\"CMCWithdraw: NO_OP\\\"\\n        );\\n\\n        // Register and execute the transfer\\n        transferAsset(wd.assetId, wd.recipient, actualAmount);\\n\\n        // Do we have to make a call in addition to the actual transfer?\\n        if (wd.callTo != address(0)) {\\n            WithdrawHelper(wd.callTo).execute(wd, actualAmount);\\n        }\\n    }\\n\\n    function verifySignaturesOnWithdrawDataHash(\\n        bytes32 wdHash,\\n        bytes calldata aliceSignature,\\n        bytes calldata bobSignature\\n    ) internal view {\\n        bytes32 commitment =\\n            keccak256(abi.encode(CommitmentType.WithdrawData, wdHash));\\n        require(\\n            commitment.checkSignature(aliceSignature, alice),\\n            \\\"CMCWithdraw: INVALID_ALICE_SIG\\\"\\n        );\\n        require(\\n            commitment.checkSignature(bobSignature, bob),\\n            \\\"CMCWithdraw: INVALID_BOB_SIG\\\"\\n        );\\n    }\\n\\n    function hashWithdrawData(WithdrawData calldata wd)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(wd));\\n    }\\n}\\n\",\"keccak256\":\"0x7fde93a55cab8b4a9497471af1f8321a6d9463a93c3c6b11cf6d5ada26326beb\",\"license\":\"UNLICENSED\"},\"src.sol/ChannelMastercopy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IVectorChannel.sol\\\";\\nimport \\\"./CMCCore.sol\\\";\\nimport \\\"./CMCAsset.sol\\\";\\nimport \\\"./CMCDeposit.sol\\\";\\nimport \\\"./CMCWithdraw.sol\\\";\\nimport \\\"./CMCAdjudicator.sol\\\";\\n\\n/// @title ChannelMastercopy\\n/// @author Connext <support@connext.network>\\n/// @notice Contains the logic used by all Vector multisigs. A proxy to this\\n///         contract is deployed per-channel using the ChannelFactory.sol.\\n///         Supports channel adjudication logic, deposit logic, and arbitrary\\n///         calls when a commitment is double-signed.\\ncontract ChannelMastercopy is\\n    CMCCore,\\n    CMCAsset,\\n    CMCDeposit,\\n    CMCWithdraw,\\n    CMCAdjudicator,\\n    IVectorChannel\\n{\\n\\n}\\n\",\"keccak256\":\"0x96d68c908eb39a0002b574c423306ef1b9991da56087cb8f5e2d8b908676b3c7\",\"license\":\"UNLICENSED\"},\"src.sol/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title CMCWithdraw\\n/// @author Connext <support@connext.network>\\n/// @notice A \\\"mutex\\\" reentrancy guard, heavily influenced by OpenZeppelin.\\n\\ncontract ReentrancyGuard {\\n    uint256 private constant OPEN = 1;\\n    uint256 private constant LOCKED = 2;\\n\\n    uint256 public lock;\\n\\n    function setup() internal {\\n        lock = OPEN;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(lock == OPEN, \\\"ReentrancyGuard: REENTRANT_CALL\\\");\\n        lock = LOCKED;\\n        _;\\n        lock = OPEN;\\n    }\\n\\n    modifier nonReentrantView() {\\n        require(lock == OPEN, \\\"ReentrancyGuard: REENTRANT_CALL\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf7adf3f05703e0176d892051633e6ca3291e5a3d7ab769f880c03a0d0849dfa7\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/Commitment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nenum CommitmentType {ChannelState, WithdrawData}\\n\",\"keccak256\":\"0xabfb62d2dbe45e307fc08742f87d2ff5d6faa9ab065f0c2395dc4adcbe0a9c20\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ICMCAdjudicator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface ICMCAdjudicator {\\n    struct CoreChannelState {\\n        address channelAddress;\\n        address alice;\\n        address bob;\\n        address[] assetIds;\\n        Balance[] balances;\\n        uint256[] processedDepositsA;\\n        uint256[] processedDepositsB;\\n        uint256[] defundNonces;\\n        uint256 timeout;\\n        uint256 nonce;\\n        bytes32 merkleRoot;\\n    }\\n\\n    struct CoreTransferState {\\n        address channelAddress;\\n        bytes32 transferId;\\n        address transferDefinition;\\n        address initiator;\\n        address responder;\\n        address assetId;\\n        Balance balance;\\n        uint256 transferTimeout;\\n        bytes32 initialStateHash;\\n    }\\n\\n    struct ChannelDispute {\\n        bytes32 channelStateHash;\\n        uint256 nonce;\\n        bytes32 merkleRoot;\\n        uint256 consensusExpiry;\\n        uint256 defundExpiry;\\n    }\\n\\n    struct TransferDispute {\\n        bytes32 transferStateHash;\\n        uint256 transferDisputeExpiry;\\n        bool isDefunded;\\n    }\\n\\n    event ChannelDisputed(\\n        address disputer,\\n        CoreChannelState state,\\n        ChannelDispute dispute\\n    );\\n\\n    event ChannelDefunded(\\n        address defunder,\\n        CoreChannelState state,\\n        ChannelDispute dispute,\\n        address[] assetIds\\n    );\\n\\n    event TransferDisputed(\\n        address disputer,\\n        CoreTransferState state,\\n        TransferDispute dispute\\n    );\\n\\n    event TransferDefunded(\\n        address defunder,\\n        CoreTransferState state,\\n        TransferDispute dispute,\\n        bytes encodedInitialState,\\n        bytes encodedResolver,\\n        Balance balance\\n    );\\n\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\n\\n    function getDefundNonce(address assetId) external view returns (uint256);\\n\\n    function getTransferDispute(bytes32 transferId)\\n        external\\n        view\\n        returns (TransferDispute memory);\\n\\n    function disputeChannel(\\n        CoreChannelState calldata ccs,\\n        bytes calldata aliceSignature,\\n        bytes calldata bobSignature\\n    ) external;\\n\\n    function defundChannel(\\n        CoreChannelState calldata ccs,\\n        address[] calldata assetIds,\\n        uint256[] calldata indices\\n    ) external;\\n\\n    function disputeTransfer(\\n        CoreTransferState calldata cts,\\n        bytes32[] calldata merkleProofData\\n    ) external;\\n\\n    function defundTransfer(\\n        CoreTransferState calldata cts,\\n        bytes calldata encodedInitialTransferState,\\n        bytes calldata encodedTransferResolver,\\n        bytes calldata responderSignature\\n    ) external;\\n}\\n\",\"keccak256\":\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ICMCAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICMCAsset {\\n    function getTotalTransferred(address assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getExitableAmount(address assetId, address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exit(\\n        address assetId,\\n        address owner,\\n        address payable recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ICMCCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICMCCore {\\n    function setup(address _alice, address _bob) external;\\n\\n    function getAlice() external view returns (address);\\n\\n    function getBob() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ICMCDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICMCDeposit {\\n    event AliceDeposited(address assetId, uint256 amount);\\n    \\n    function getTotalDepositsAlice(address assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalDepositsBob(address assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function depositAlice(address assetId, uint256 amount) external payable;\\n}\\n\",\"keccak256\":\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ICMCWithdraw.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nstruct WithdrawData {\\n    address channelAddress;\\n    address assetId;\\n    address payable recipient;\\n    uint256 amount;\\n    uint256 nonce;\\n    address callTo;\\n    bytes callData;\\n}\\n\\ninterface ICMCWithdraw {\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\n        external\\n        view\\n        returns (bool);\\n\\n    function withdraw(\\n        WithdrawData calldata wd,\\n        bytes calldata aliceSignature,\\n        bytes calldata bobSignature\\n    ) external;\\n}\\n\",\"keccak256\":\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ITestChannel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVectorChannel.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\ninterface ITestChannel is IVectorChannel {\\n    function testMakeExitable(\\n        address assetId,\\n        address payable recipient,\\n        uint256 maxAmount\\n    ) external;\\n\\n    function testMakeBalanceExitable(\\n        address assetId,\\n        Balance memory balance\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc33ba932ee6d2e0c16b808cec6d1e88b805cbc62119b28755bb22881e64efbaa\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ITransferDefinition.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITransferRegistry.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\ninterface ITransferDefinition {\\n    // Validates the initial state of the transfer.\\n    // Called by validator.ts during `create` updates.\\n    function create(bytes calldata encodedBalance, bytes calldata)\\n        external\\n        view\\n        returns (bool);\\n\\n    // Performs a state transition to resolve a transfer and returns final balances.\\n    // Called by validator.ts during `resolve` updates.\\n    function resolve(\\n        bytes calldata encodedBalance,\\n        bytes calldata,\\n        bytes calldata\\n    ) external view returns (Balance memory);\\n\\n    // Should also have the following properties:\\n    // string public constant override Name = \\\"...\\\";\\n    // string public constant override StateEncoding = \\\"...\\\";\\n    // string public constant override ResolverEncoding = \\\"...\\\";\\n    // These properties are included on the transfer specifically\\n    // to make it easier for implementers to add new transfers by\\n    // only include a `.sol` file\\n    function Name() external view returns (string memory);\\n\\n    function StateEncoding() external view returns (string memory);\\n\\n    function ResolverEncoding() external view returns (string memory);\\n\\n    function EncodedCancel() external view returns (bytes memory);\\n\\n    function getRegistryInformation()\\n        external\\n        view\\n        returns (RegisteredTransfer memory);\\n}\\n\",\"keccak256\":\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ITransferRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nstruct RegisteredTransfer {\\n    string name;\\n    address definition;\\n    string stateEncoding;\\n    string resolverEncoding;\\n    bytes encodedCancel;\\n}\\n\\ninterface ITransferRegistry {\\n    event TransferAdded(RegisteredTransfer transfer);\\n\\n    event TransferRemoved(RegisteredTransfer transfer);\\n\\n    // Should add a transfer definition to the registry\\n    // onlyOwner\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\n\\n    // Should remove a transfer definition to the registry\\n    // onlyOwner\\n    function removeTransferDefinition(string memory name) external;\\n\\n    // Should return all transfer defintions in registry\\n    function getTransferDefinitions()\\n        external\\n        view\\n        returns (RegisteredTransfer[] memory);\\n}\\n\",\"keccak256\":\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/IVectorChannel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICMCCore.sol\\\";\\nimport \\\"./ICMCAsset.sol\\\";\\nimport \\\"./ICMCDeposit.sol\\\";\\nimport \\\"./ICMCWithdraw.sol\\\";\\nimport \\\"./ICMCAdjudicator.sol\\\";\\n\\ninterface IVectorChannel is\\n    ICMCCore,\\n    ICMCAsset,\\n    ICMCDeposit,\\n    ICMCWithdraw,\\n    ICMCAdjudicator\\n{}\\n\",\"keccak256\":\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/Types.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nstruct Balance {\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\n}\\n\",\"keccak256\":\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/WithdrawHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICMCWithdraw.sol\\\";\\n\\ninterface WithdrawHelper {\\n    function execute(WithdrawData calldata wd, uint256 actualAmount) external;\\n}\\n\",\"keccak256\":\"0x45bd70363bc7a45001589d55d8d068a3baa321c50382c0c73f1ffae45adfc4bb\",\"license\":\"UNLICENSED\"},\"src.sol/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibERC20.sol\\\";\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/// @title LibAsset\\n/// @author Connext <support@connext.network>\\n/// @notice This library contains helpers for dealing with onchain transfers\\n///         of in-channel assets. It is designed to safely handle all asset\\n///         transfers out of channel in the event of an onchain dispute. Also\\n///         safely handles ERC20 transfers that may be non-compliant\\nlibrary LibAsset {\\n    address constant ETHER_ASSETID = address(0);\\n\\n    function isEther(address assetId) internal pure returns (bool) {\\n        return assetId == ETHER_ASSETID;\\n    }\\n\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return\\n            isEther(assetId)\\n                ? address(this).balance\\n                : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    function transferEther(address payable recipient, uint256 amount)\\n        internal\\n        returns (bool)\\n    {\\n        (bool success, bytes memory returnData) =\\n            recipient.call{value: amount}(\\\"\\\");\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return true;\\n    }\\n\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return LibERC20.transfer(assetId, recipient, amount);\\n    }\\n\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\n    // both standard-compliant ones as well as tokens that exhibit the\\n    // missing-return-value bug.\\n    // Although it behaves very much like Solidity's `transfer` function\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\n    // because we need to register every transfer out of the channel.\\n    // Therefore, it should normally not be used directly, with the single\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\n    // which combines the \\\"naked\\\" unregistered transfer given below\\n    // with a registration.\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\n    function unregisteredTransfer(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            isEther(assetId)\\n                ? transferEther(recipient, amount)\\n                : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\",\"license\":\"UNLICENSED\"},\"src.sol/lib/LibChannelCrypto.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\n\\t\\t\\n/// @author Connext <support@connext.network>\\t\\t\\n/// @notice This library contains helpers for recovering signatures from a\\t\\t\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\t\\t\\n///         messages to prevent misuse of private keys by injected providers,\\t\\t\\n///         and instead only sign messages with a Vector channel prefix.\\nlibrary LibChannelCrypto {\\n    function checkSignature(\\n        bytes32 hash,\\n        bytes memory signature,\\n        address allegedSigner\\n    ) internal pure returns (bool) {\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\n    }\\n\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        bytes32 digest = toChannelSignedMessage(hash);\\n        return ECDSA.recover(digest, signature);\\n    }\\n\\n    function toChannelSignedMessage(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(abi.encodePacked(\\\"\\\\x16Vector Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    function checkUtilitySignature(\\n        bytes32 hash,\\n        bytes memory signature,\\n        address allegedSigner\\n    ) internal pure returns (bool) {\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\n    }\\n\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        bytes32 digest = toUtilitySignedMessage(hash);\\n        return ECDSA.recover(digest, signature);\\n    }\\n\\n    function toUtilitySignedMessage(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(abi.encodePacked(\\\"\\\\x17Utility Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\",\"license\":\"UNLICENSED\"},\"src.sol/lib/LibERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title LibERC20\\n/// @author Connext <support@connext.network>\\n/// @notice This library provides several functions to safely handle\\n///         noncompliant tokens (i.e. does not return a boolean from\\n///         the transfer function)\\n\\nlibrary LibERC20 {\\n    function wrapCall(address assetId, bytes memory callData)\\n        internal\\n        returns (bool)\\n    {\\n        require(Address.isContract(assetId), \\\"LibERC20: NO_CODE\\\");\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\n    }\\n\\n    function approve(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"approve(address,uint256)\\\",\\n                    spender,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transferFrom(\\n        address assetId,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\",\\n                    sender,\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transfer(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\",\"license\":\"UNLICENSED\"},\"src.sol/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title LibMath\\n/// @author Connext <support@connext.network>\\n/// @notice This library allows functions that would otherwise overflow and\\n///         revert if SafeMath was used to instead return the UINT_MAX. In the\\n///         adjudicator, this is used to ensure you can get the majority of\\n///         funds out in the event your balance > UINT_MAX and there is an\\n///         onchain dispute.\\nlibrary LibMath {\\n    /// @dev Returns the maximum uint256 for an addition that would overflow\\n    ///      (saturation arithmetic)\\n    function satAdd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 sum = x + y;\\n        return sum >= x ? sum : type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x1e6307538bfdb12a0f5234db5b9b22365b6abe2b96baa37f2e4b5d2d3f6683b8\",\"license\":\"UNLICENSED\"},\"src.sol/lib/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title LibUtils\\n/// @author Connext <support@connext.network>\\n/// @notice Contains a helper to revert if a call was not successfully\\n///         made\\nlibrary LibUtils {\\n    // If success is false, reverts and passes on the revert string.\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\n        internal\\n        pure\\n    {\\n        if (!success) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\",\"license\":\"UNLICENSED\"},\"src.sol/testing/TestChannel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport \\\"../ChannelMastercopy.sol\\\";\\nimport \\\"../interfaces/ITestChannel.sol\\\";\\n\\n/// @title TestChannel\\n/// @author Layne Haber <layne@connext.network>\\n/// @notice This contract will help test the `ChannelMastercopy` contract and\\n///         the associated bits of functionality. This contract should *only*\\n///         contain aliases to internal functions that should be unit-tested,\\n///         like the `makeExitable` call on `CMCAsset.sol`. Using this\\n///         contract will help reduce the amount of boilerplate needed to test\\n///         component functionality. For example, `CMCAsset.sol` is only\\n///         able to be tested via the adjudicator in many practical cases.\\n///         Creating a helper function allows for easier testing of only\\n///         that functionality.\\n\\ncontract TestChannel is ChannelMastercopy, ITestChannel {\\n    function testMakeExitable(\\n        address assetId,\\n        address payable recipient,\\n        uint256 maxAmount\\n    ) public override {\\n        makeExitable(assetId, recipient, maxAmount);\\n    }\\n\\n    function testMakeBalanceExitable(\\n        address assetId,\\n        Balance memory balance\\n    ) public override {\\n        makeBalanceExitable(assetId, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x20e6faa19fa688dbfe530ce326cead6ef90127968f68a28156ba0a2a2259589c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5030606081901b6080526140be61008b6000398061013e5280610471528061081d52806108985280610acc5280610bea5280610c93528061119c5280611311528061147952806115a6528061163052806116c45280611748528061194c52806119d55280611a5e5280611af75280611b7a52506140be6000f3fe60806040526004361061012e5760003560e01c80637b037295116100ab578063cefa51221161006f578063cefa5122146103ba578063e7283a8d146103da578063e9852569146103fa578063eeb30fea1461041a578063f19eb10e1461042f578063f83d08ba14610451576101ae565b80637b0372951461030d5780638c048fc21461032d578063b081e9c81461035a578063c55e1dac1461037a578063c60939be1461039a576101ae565b80634d3fcbda116100f25780634d3fcbda1461026d5780635bc9d96d1461028d5780635fd334d9146102ad578063635ae901146102cd5780636f33389e146102e0576101ae565b8063072f25fd146101b3578063241686a0146101d55780632c889aa1146102005780632d34ba79146102205780633ff0da1614610240576101ae565b366101ae57306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101855760405162461bcd60e51b815260040161017c90613d6f565b60405180910390fd5b6001600054146101a75760405162461bcd60e51b815260040161017c90613b2b565b6001600055005b600080fd5b3480156101bf57600080fd5b506101d36101ce366004612c89565b610466565b005b3480156101e157600080fd5b506101ea610810565b6040516101f791906132b2565b60405180910390f35b34801561020c57600080fd5b506101d361021b366004612d66565b61088d565b34801561022c57600080fd5b506101d361023b3660046128e0565b610ac1565b34801561024c57600080fd5b5061026061025b366004612a22565b610bd7565b6040516101f79190613e8a565b34801561027957600080fd5b506101d3610288366004612b27565b610c88565b34801561029957600080fd5b506101d36102a8366004612958565b611191565b3480156102b957600080fd5b506101d36102c8366004612c36565b611306565b6101d36102db3660046129d7565b61146e565b3480156102ec57600080fd5b506103006102fb3660046128c4565b611599565b6040516101f79190613ee2565b34801561031957600080fd5b506101d36103283660046129a2565b611615565b34801561033957600080fd5b5061034d610348366004612d34565b611623565b6040516101f79190613480565b34801561036657600080fd5b506103006103753660046128c4565b6116b7565b34801561038657600080fd5b506101d3610395366004612918565b61172d565b3480156103a657600080fd5b506101d36103b5366004612bb7565b61173d565b3480156103c657600080fd5b506103006103d53660046128c4565b61193f565b3480156103e657600080fd5b506103006103f53660046128c4565b6119c8565b34801561040657600080fd5b506103006104153660046128e0565b611a51565b34801561042657600080fd5b506101ea611aea565b34801561043b57600080fd5b50610444611b67565b6040516101f79190613e2e565b34801561045d57600080fd5b50610300611c0f565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104af5760405162461bcd60e51b815260040161017c90613d6f565b6001600054146104d15760405162461bcd60e51b815260040161017c90613b2b565b600260005586306104e560208301836128c4565b6001600160a01b03161461050b5760405162461bcd60e51b815260040161017c90613692565b6020808901356000908152600d9091526040902060018101546105405760405162461bcd60e51b815260040161017c90613a7a565b805461054b8a611c15565b146105685760405162461bcd60e51b815260040161017c90613ddb565b600281015460ff161561058d5760405162461bcd60e51b815260040161017c906137da565b60028101805460ff191660011790556105a461267b565b816001015442101561078c5789610160013589896040516105c6929190613252565b6040518091039020146105eb5760405162461bcd60e51b815260040161017c90613ddb565b6105fb60a08b0160808c016128c4565b6001600160a01b0316336001600160a01b0316148061066c575061066c85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061065f9250505060a08d0160808e016128c4565b6101608d01359190611c45565b6106885760405162461bcd60e51b815260040161017c90613d3a565b600061069a60608c0160408d016128c4565b9050806001600160a01b0316638ef98a7e8c60c0016040516020016106bf9190613e20565b6040516020818303038152906040528c8c8c8c6040518663ffffffff1660e01b81526004016106f29594939291906134a9565b60806040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190612a55565b915061075660c08c013560e08d0135611c6d565b82516020810151905161076891611c6d565b11156107865760405162461bcd60e51b815260040161017c90613da6565b506107a1565b61079e368b90038b0160c08c01612a3a565b90505b6107ba6107b460c08c0160a08d016128c4565b82611c99565b7f93f6b8187e81bd7d01ce234c043cd6ae4feda2e2ae91daae0962c68a656da8c7338b848c8c8c8c886040516107f7989796959493929190613378565b60405180910390a1505060016000555050505050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561085b5760405162461bcd60e51b815260040161017c90613d6f565b60016000541461087d5760405162461bcd60e51b815260040161017c90613b2b565b506002546001600160a01b031690565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108d65760405162461bcd60e51b815260040161017c90613d6f565b6001600054146108f85760405162461bcd60e51b815260040161017c90613b2b565b6002600055843061090c60208301836128c4565b6001600160a01b0316146109325760405162461bcd60e51b815260040161017c906135c1565b600061093d87611cea565b905061094c8187878787611cfd565b60008181526006602052604090205460ff161561097b5760405162461bcd60e51b815260040161017c906139ca565b6000818152600660209081526040808320805460ff191660011790556109b3916109a9918b01908b016128c4565b8960600135611e07565b905060008111806109dd575060006109d160c08a0160a08b016128c4565b6001600160a01b031614155b6109f95760405162461bcd60e51b815260040161017c906135f8565b610a22610a0c60408a0160208b016128c4565b610a1c60608b0160408c016128c4565b83611e1b565b6000610a3460c08a0160a08b016128c4565b6001600160a01b031614610ab257610a5260c0890160a08a016128c4565b6001600160a01b031663f50cd32c89836040518363ffffffff1660e01b8152600401610a7f929190613ec0565b600060405180830381600087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505050505b50506001600055505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b0a5760405162461bcd60e51b815260040161017c90613d6f565b6001546001600160a01b031615610b335760405162461bcd60e51b815260040161017c90613c86565b6001600160a01b03821615801590610b5357506001600160a01b03811615155b610b6f5760405162461bcd60e51b815260040161017c90613952565b806001600160a01b0316826001600160a01b03161415610ba15760405162461bcd60e51b815260040161017c906136c7565b610ba9611e4c565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055565b610bdf6126a0565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c285760405162461bcd60e51b815260040161017c90613d6f565b600160005414610c4a5760405162461bcd60e51b815260040161017c90613b2b565b506000908152600d60209081526040918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610cd15760405162461bcd60e51b815260040161017c90613d6f565b600160005414610cf35760405162461bcd60e51b815260040161017c90613b2b565b60026000558430610d0760208301836128c4565b6001600160a01b0316148015610d3f57506001546001600160a01b0316610d3460408301602084016128c4565b6001600160a01b0316145b8015610d6d57506002546001600160a01b0316610d6260608301604084016128c4565b6001600160a01b0316145b610d895760405162461bcd60e51b815260040161017c9061385a565b83610da65760405162461bcd60e51b815260040161017c90613823565b83821115610dc65760405162461bcd60e51b815260040161017c90613cb6565b600754610dd287611e53565b14610def5760405162461bcd60e51b815260040161017c90613546565b610df7611e66565b610e135760405162461bcd60e51b815260040161017c9061365b565b60005b84811015611143576000868683818110610e2c57fe5b9050602002016020810190610e4191906128c4565b9050600084831015610ec657858584818110610e5957fe5b905060200201359050888060600190610e729190613eeb565b82818110610e7c57fe5b9050602002016020810190610e9191906128c4565b6001600160a01b0316826001600160a01b031614610ec15760405162461bcd60e51b815260040161017c9061358a565b610f32565b5060005b610ed760608a018a613eeb565b9050811015610f3257610eed60608a018a613eeb565b82818110610ef757fe5b9050602002016020810190610f0c91906128c4565b6001600160a01b0316826001600160a01b03161415610f2a57610f32565b600101610eca565b6000610f4160608b018b613eeb565b90508214610f6c57610f5660e08b018b613eeb565b83818110610f6057fe5b90506020020135610f6f565b60015b6001600160a01b0384166000908152600c60205260409020549091508111610fa95760405162461bcd60e51b815260040161017c906138d3565b6001600160a01b0383166000908152600c6020526040812091909155610fce83611e83565b90506000610fdb84611e9e565b9050610fe561267b565b610ff260608d018d613eeb565b905084141561107c576040518060400160405280604051806040016040528086815260200185815250815260200160405180604001604052808f602001602081019061103e91906128c4565b6001600160a01b03166001600160a01b031681526020018f604001602081019061106891906128c4565b6001600160a01b0316905290529050611128565b61108960808d018d613f31565b8581811061109357fe5b9050608002018036038101906110a99190612a3a565b90506110ea6110bb60a08e018e613eeb565b868181106110c557fe5b90506020020135840382600001516000600281106110df57fe5b602002015190611ed3565b8151526111216110fd60c08e018e613eeb565b8681811061110757fe5b90506020020135830382600001516001600281106110df57fe5b8151602001525b6111328582611c99565b505060019093019250610e16915050565b507f49cbb28c69ffbdb6b3893f83d64557662a5dd43ffd6045b6a5180ab0a027f22433876007888860405161117c9594939291906132f9565b60405180910390a15050600160005550505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111da5760405162461bcd60e51b815260040161017c90613d6f565b6001600054146111fc5760405162461bcd60e51b815260040161017c90613b2b565b6002600055336001600160a01b03831614806112295750806001600160a01b0316826001600160a01b0316145b6112455760405162461bcd60e51b815260040161017c90613c4f565b6001600160a01b038084166000908152600460209081526040808320938616835292905290812054611278908590611e07565b90506000811161129a5760405162461bcd60e51b815260040161017c90613ba6565b6001600160a01b038085166000908152600460209081526040808320938716835292905220546112ca9082611eec565b6001600160a01b038086166000908152600460209081526040808320938816835292905220556112fb848383611e1b565b505060016000555050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561134f5760405162461bcd60e51b815260040161017c90613d6f565b6001600054146113715760405162461bcd60e51b815260040161017c90613b2b565b6002600055823061138560208301836128c4565b6001600160a01b0316146113ab5760405162461bcd60e51b815260040161017c90613692565b60006113b685611c15565b90506113c9848460076002015484611f2e565b6113d1611e66565b6113ed5760405162461bcd60e51b815260040161017c9061365b565b6020808601356000908152600d909152604090206001810154156114235760405162461bcd60e51b815260040161017c90613c06565b81815561143542610140880135611c6d565b60018201556040517f87b348a76dd4ef431d45553a1d8c5934db960e64201a5776ab64e3eb397f4cfa9061117c9033908990859061334c565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156114b75760405162461bcd60e51b815260040161017c90613d6f565b6001600054146114d95760405162461bcd60e51b815260040161017c90613b2b565b60026000556114e782611f90565b156115105780341461150b5760405162461bcd60e51b815260040161017c90613a01565b611538565b61151c82333084611f9d565b6115385760405162461bcd60e51b815260040161017c90613989565b6001600160a01b03821660009081526005602052604090819020805483019055517fb52926ac8ed62d53d4b88d81b71c48639bd63aa53950fcf3e1d7676ca7c26140906115889084908490613467565b60405180910390a150506001600055565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156115e45760405162461bcd60e51b815260040161017c90613d6f565b6001600054146116065760405162461bcd60e51b815260040161017c90613b2b565b61160f82611e83565b92915050565b61161f8282611c99565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561166e5760405162461bcd60e51b815260040161017c90613d6f565b6001600054146116905760405162461bcd60e51b815260040161017c90613b2b565b6006600061169d84611cea565b815260208101919091526040016000205460ff1692915050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156117025760405162461bcd60e51b815260040161017c90613d6f565b6001600054146117245760405162461bcd60e51b815260040161017c90613b2b565b61160f82611e9e565b611738838383611ff0565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156117865760405162461bcd60e51b815260040161017c90613d6f565b6001600054146117a85760405162461bcd60e51b815260040161017c90613b2b565b600260005584306117bc60208301836128c4565b6001600160a01b03161480156117f457506001546001600160a01b03166117e960408301602084016128c4565b6001600160a01b0316145b801561182257506002546001600160a01b031661181760608301604084016128c4565b6001600160a01b0316145b61183e5760405162461bcd60e51b815260040161017c9061385a565b600061184987611e53565b9050611859878288888888612051565b611861611e66565b1561187e5760405162461bcd60e51b815260040161017c9061365b565b600854610120880135116118a45760405162461bcd60e51b815260040161017c906136fe565b6118ac61215b565b6118e0576118bf42610100890135611c6d565b600a556118dc6118d56101008901356002612163565b4290611c6d565b600b555b60078181556101208801356008556101408801356009556040517fef03cf86f2e77e1a0ae5cb25b50519e55b94788b920ace71f92341df2dab97ed916119299133918b916132c6565b60405180910390a1505060016000555050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561198a5760405162461bcd60e51b815260040161017c90613d6f565b6001600054146119ac5760405162461bcd60e51b815260040161017c90613b2b565b506001600160a01b031660009081526003602052604090205490565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611a135760405162461bcd60e51b815260040161017c90613d6f565b600160005414611a355760405162461bcd60e51b815260040161017c90613b2b565b506001600160a01b03166000908152600c602052604090205490565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611a9c5760405162461bcd60e51b815260040161017c90613d6f565b600160005414611abe5760405162461bcd60e51b815260040161017c90613b2b565b506001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611b355760405162461bcd60e51b815260040161017c90613d6f565b600160005414611b575760405162461bcd60e51b815260040161017c90613b2b565b506001546001600160a01b031690565b611b6f6126c0565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611bb85760405162461bcd60e51b815260040161017c90613d6f565b600160005414611bda5760405162461bcd60e51b815260040161017c90613b2b565b506040805160a0810182526007548152600854602082015260095491810191909152600a546060820152600b54608082015290565b60005481565b600081604051602001611c289190613e7b565b604051602081830303815290604052805190602001209050919050565b6000816001600160a01b0316611c5b858561219d565b6001600160a01b031614949350505050565b600082820183811015611c925760405162461bcd60e51b815260040161017c906137a3565b9392505050565b60005b60028110156117385781516000908260028110611cb557fe5b602002015190508015611ce157611ce18484602001518460028110611cd657fe5b602002015183611ff0565b50600101611c9c565b600081604051602001611c289190613ead565b6000600186604051602001611d139291906134e4565b604051602081830303815290604052805190602001209050611d7985858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050600154859392506001600160a01b03169050611c45565b611d955760405162461bcd60e51b815260040161017c90613bcf565b611de383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050600254859392506001600160a01b03169050611c45565b611dff5760405162461bcd60e51b815260040161017c9061391b565b505050505050565b6000611c9282611e16856121b5565b61224c565b611e258382612262565b611e30838383612284565b6117385760405162461bcd60e51b815260040161017c90613735565b6001600055565b600081604051602001611c289190613e68565b60004260076003015411158015611e7e5750600b5442105b905090565b6001600160a01b031660009081526005602052604090205490565b6001600160a01b0381166000908152600560209081526040808320546003909252822054611ecb846121b5565b010392915050565b600082820183811015611c92576000195b949350505050565b6000611c9283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506122ad565b611f6e8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508692508591506122d99050565b611f8a5760405162461bcd60e51b815260040161017c90613b62565b50505050565b6001600160a01b03161590565b6000611fe785858585604051602401611fb893929190613443565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b179052612376565b95945050505050565b6001600160a01b038084166000908152600460209081526040808320938616835292905220546120209082611ed3565b6001600160a01b03938416600090815260046020908152604080832095909616825293909352929091209190915550565b600080866040516020016120669291906134e4565b6040516020818303038152906040528051906020012090506120d085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120c89250505060408a0160208b016128c4565b839190611c45565b6120ec5760405162461bcd60e51b815260040161017c90613cf9565b61213683838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120c89250505060608a0160408b016128c4565b6121525760405162461bcd60e51b815260040161017c9061376c565b50505050505050565b600a54421090565b6000826121725750600061160f565b8282028284828161217f57fe5b0414611c925760405162461bcd60e51b815260040161017c90613abf565b6000806121a984612427565b9050611ee4818461243a565b60006121c082611f90565b612245576040516370a0823160e01b81526001600160a01b038316906370a08231906121f09030906004016132b2565b60206040518083038186803b15801561220857600080fd5b505afa15801561221c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122409190612d9f565b61160f565b5047919050565b600081831061225b5781611c92565b5090919050565b6001600160a01b03909116600090815260036020526040902080549091019055565b600061228f84611f90565b6122a35761229e848484612568565b611ee4565b611ee48383612575565b600081848411156122d15760405162461bcd60e51b815260040161017c91906134fc565b505050900390565b600081815b855181101561236b5760008682815181106122f557fe5b60200260200101519050808311612336578281604051602001612319929190613244565b604051602081830303815290604052805190602001209250612362565b8083604051602001612349929190613244565b6040516020818303038152906040528051906020012092505b506001016122de565b509092149392505050565b6000612381836125ed565b61239d5760405162461bcd60e51b815260040161017c90613b00565b60006060846001600160a01b0316846040516123b99190613262565b6000604051808303816000865af19150503d80600081146123f6576040519150601f19603f3d011682016040523d82523d6000602084013e6123fb565b606091505b509150915061240a8282612626565b80511580611fe7575080806020019051810190611fe79190612a02565b600081604051602001611c28919061327e565b6000815160411461245d5760405162461bcd60e51b815260040161017c90613624565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156124af5760405162461bcd60e51b815260040161017c90613891565b8060ff16601b141580156124c757508060ff16601c14155b156124e45760405162461bcd60e51b815260040161017c90613a38565b600060018783868660405160008152602001604052604051612509949392919061348b565b6020604051602081039080840390855afa15801561252b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661255e5760405162461bcd60e51b815260040161017c9061350f565b9695505050505050565b6000611ee4848484612633565b6000806060846001600160a01b031684604051612591906132af565b60006040518083038185875af1925050503d80600081146125ce576040519150601f19603f3d011682016040523d82523d6000602084013e6125d3565b606091505b50915091506125e28282612626565b506001949350505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611ee4575050151592915050565b8161161f57805160208201fd5b6000611ee484848460405160240161264c929190613467565b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052612376565b604051806040016040528061268e6126ee565b815260200161269b6126ee565b905290565b604080516060810182526000808252602082018190529181019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60405180604001604052806002906020820280368337509192915050565b803561160f81614070565b60008083601f840112612728578182fd5b5081356001600160401b0381111561273e578182fd5b602083019150836020808302850101111561275857600080fd5b9250929050565b600082601f83011261276f578081fd5b6127796040613f77565b905080828460408501111561278d57600080fd5b60005b60028110156127b95781356127a481614070565b83526020928301929190910190600101612790565b50505092915050565b60008083601f8401126127d3578182fd5b5081356001600160401b038111156127e9578182fd5b60208301915083602082850101111561275857600080fd5b600060808284031215612812578081fd5b61281c6040613f77565b905082601f83011261282d57600080fd5b6128376040613f77565b8083604085018681111561284a57600080fd5b60005b600281101561286c57823585526020948501949092019160010161284d565b5082855261287a878261275f565b60208601525050505092915050565b6000610160828403121561289b578081fd5b50919050565b6000610180828403121561289b578081fd5b600060e0828403121561289b578081fd5b6000602082840312156128d5578081fd5b8135611c9281614070565b600080604083850312156128f2578081fd5b82356128fd81614070565b9150602083013561290d81614070565b809150509250929050565b60008060006060848603121561292c578081fd5b833561293781614070565b9250602084013561294781614070565b929592945050506040919091013590565b60008060006060848603121561296c578081fd5b833561297781614070565b9250602084013561298781614070565b9150604084013561299781614070565b809150509250925092565b60008060a083850312156129b4578182fd5b82356129bf81614070565b91506129ce8460208501612801565b90509250929050565b600080604083850312156129e9578182fd5b82356129f481614070565b946020939093013593505050565b600060208284031215612a13578081fd5b81518015158114611c92578182fd5b600060208284031215612a33578081fd5b5035919050565b600060808284031215612a4b578081fd5b611c928383612801565b600060808284031215612a66578081fd5b612a706040613f77565b83601f840112612a7e578182fd5b612a886040613f77565b80846040860187811115612a9a578586fd5b855b6002811015612abb578251855260209485019490920191600101612a9c565b5082855287605f880112612acd578586fd5b612ad76040613f77565b9350839250905060808601871015612aed578485fd5b845b6002811015612b18578151612b0381614070565b84526020938401939190910190600101612aef565b50506020830152509392505050565b600080600080600060608688031215612b3e578283fd5b85356001600160401b0380821115612b54578485fd5b612b6089838a01612889565b96506020880135915080821115612b75578485fd5b612b8189838a01612717565b90965094506040880135915080821115612b99578283fd5b50612ba688828901612717565b969995985093965092949392505050565b600080600080600060608688031215612bce578283fd5b85356001600160401b0380821115612be4578485fd5b612bf089838a01612889565b96506020880135915080821115612c05578485fd5b612c1189838a016127c2565b90965094506040880135915080821115612c29578283fd5b50612ba6888289016127c2565b60008060006101a08486031215612c4b578081fd5b612c5585856128a1565b92506101808401356001600160401b03811115612c70578182fd5b612c7c86828701612717565b9497909650939450505050565b60008060008060008060006101e0888a031215612ca4578485fd5b612cae89896128a1565b96506101808801356001600160401b0380821115612cca578687fd5b612cd68b838c016127c2565b90985096506101a08a0135915080821115612cef578384fd5b612cfb8b838c016127c2565b90965094506101c08a0135915080821115612d14578384fd5b50612d218a828b016127c2565b989b979a50959850939692959293505050565b600060208284031215612d45578081fd5b81356001600160401b03811115612d5a578182fd5b611ee4848285016128b3565b600080600080600060608688031215612d7d578283fd5b85356001600160401b0380821115612d93578485fd5b612bf089838a016128b3565b600060208284031215612db0578081fd5b5051919050565b6001600160a01b03169052565b60008284526020808501945082825b85811015612e01578135612de681614070565b6001600160a01b031687529582019590820190600101612dd3565b509495945050505050565b60008284526020808501945082825b85811015612e01576040808389378781018581529083019085905b6002821015612e67578235612e4a81614070565b6001600160a01b0316815291850191600191909101908501612e36565b5050506080968701969190910190600101612e1b565b81835260006001600160fb1b03831115612e95578081fd5b6020830280836020870137939093016020019283525090919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612ef3816020860160208601614044565b601f01601f19169290920160200192915050565b604081833760006040838101828152908301915b6002811015612f4c5760208335612f3181614070565b6001600160a01b031683529283019290910190600101612f1b565b5050505050565b8054825260018101546020830152600281015460408301526003810154606083015260040154608090910152565b600061016060208301612f9d85612f98838761270c565b612db7565b612fa78185613f9d565b9050612fb66020860182612db7565b50612fc46040840184613f9d565b612fd16040860182612db7565b50612fdf6060840184613faa565b826060870152612ff28387018284612dc4565b925050506130036080840184613ff1565b8583036080870152613016838284612e0c565b9250505061302760a0840184613faa565b85830360a087015261303a838284612e7d565b9250505061304b60c0840184613faa565b85830360c087015261305e838284612e7d565b9250505061306f60e0840184613faa565b85830360e0870152613082838284612e7d565b6101008681013590880152610120808701359088015261014095860135959096019490945250929392505050565b80356130bb81614070565b6001600160a01b039081168352602082810135908401526040820135906130e182614070565b1660408301526130f46060820182613f9d565b6131016060840182612db7565b5061310f6080820182613f9d565b61311c6080840182612db7565b5061312a60a0820182613f9d565b61313760a0840182612db7565b5061314860c0830160c08301612f07565b610140818101359083015261016090810135910152565b80548252600181015460208301526002015460ff161515604090910152565b6000813561318b81614070565b6001600160a01b0390811684526020830135906131a782614070565b90811660208501526040830135906131be82614070565b8082166040860152606084013560608601526080840135608086015260a084013591506131ea82614070565b1660a084015260c082013536839003601e19018112613207578182fd5b820180356001600160401b0381111561321e578283fd5b80360384131561322c578283fd5b60e060c0860152611fe760e086018260208501612eb1565b918252602082015260400190565b6000828483379101908152919050565b60008251613274818460208701614044565b9190910192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b90565b6001600160a01b0391909116815260200190565b6001600160a01b038416815260e0602082018190526000906132ea90830185612f81565b9050611ee46040830184612f53565b6001600160a01b03861681526101006020820181905260009061331e83820188612f81565b905061332d6040840187612f53565b82810360e0840152613340818587612dc4565b98975050505050505050565b6001600160a01b0384168152610200810161336a60208301856130b0565b611ee46101a083018461315f565b6001600160a01b038916815260006102c060206133978185018c6130b0565b6133a56101a085018b61315f565b816102008501526133b9828501898b612eb1565b91508382036102208501526133cf828789612eb1565b85519093509150600061024085015b60028210156133fd5783518152928201926001919091019082016133de565b5050808501519150610280840160005b6002811015613432576134208451614038565b8252928201929082019060010161340d565b505050509998505050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6000606082526134bc6060830188612edb565b82810360208401526134cf818789612eb1565b90508281036040840152613340818587612eb1565b60408101600284106134f257fe5b9281526020015290565b600060208252611c926020830184612edb565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526024908201527f434d4341646a7564696361746f723a20494e56414c49445f4348414e4e454c5f60408201526309082a6960e31b606082015260800190565b6020808252601e908201527f434d4341646a7564696361746f723a20494e4445585f4d49534d415443480000604082015260600190565b6020808252601d908201527f434d4357697468647261773a204348414e4e454c5f4d49534d41544348000000604082015260600190565b6020808252601290820152710434d4357697468647261773a204e4f5f4f560741b604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b6020808252601d908201527f434d4341646a7564696361746f723a20494e56414c49445f5048415345000000604082015260600190565b6020808252818101527f434d4341646a7564696361746f723a20494e56414c49445f5452414e53464552604082015260600190565b6020808252601f908201527f434d43436f72653a204944454e544943414c5f5041525449434950414e545300604082015260600190565b6020808252601d908201527f434d4341646a7564696361746f723a20494e56414c49445f4e4f4e4345000000604082015260600190565b60208082526019908201527f434d4341737365743a205452414e534645525f4641494c454400000000000000604082015260600190565b6020808252601f908201527f434d4341646a7564696361746f723a20494e56414c49445f424f425f53494700604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526029908201527f434d4341646a7564696361746f723a205452414e534645525f414c524541445960408201526817d11151955391115160ba1b606082015260800190565b6020808252601f908201527f434d4341646a7564696361746f723a204e4f5f4153534554535f474956454e00604082015260600190565b6020808252601f908201527f434d4341646a7564696361746f723a20494e56414c49445f4348414e4e454c00604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b60208082526028908201527f434d4341646a7564696361746f723a204348414e4e454c5f414c52454144595f604082015267111151955391115160c21b606082015260800190565b6020808252601c908201527f434d4357697468647261773a20494e56414c49445f424f425f53494700000000604082015260600190565b6020808252601c908201527f434d43436f72653a20494e56414c49445f5041525449434950414e5400000000604082015260600190565b60208082526021908201527f434d434465706f7369743a2045524332305f5452414e534645525f4641494c456040820152601160fa1b606082015260800190565b6020808252601d908201527f434d4357697468647261773a20414c52454144595f4558454355544544000000604082015260600190565b6020808252601a908201527f434d434465706f7369743a2056414c55455f4d49534d41544348000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526025908201527f434d4341646a7564696361746f723a205452414e534645525f4e4f545f444953604082015264141555115160da1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a205245454e5452414e545f43414c4c00604082015260600190565b60208082526024908201527f434d4341646a7564696361746f723a20494e56414c49445f4d45524b4c455f506040820152632927a7a360e11b606082015260800190565b6020808252600f908201526e0434d4341737365743a204e4f5f4f5608c1b604082015260600190565b6020808252601e908201527f434d4357697468647261773a20494e56414c49445f414c4943455f5349470000604082015260600190565b60208082526029908201527f434d4341646a7564696361746f723a205452414e534645525f414c524541445960408201526817d11254d41555115160ba1b606082015260800190565b60208082526018908201527f434d4341737365743a204f574e45525f4d49534d415443480000000000000000604082015260600190565b6020808252601690820152750434d43436f72653a20414c52454144595f53455455560541b604082015260600190565b60208082526023908201527f434d4341646a7564696361746f723a2057524f4e475f41525241595f4c454e4760408201526254485360e81b606082015260800190565b60208082526021908201527f434d4341646a7564696361746f723a20494e56414c49445f414c4943455f53496040820152604760f81b606082015260800190565b6020808252818101527f434d4341646a7564696361746f723a20494e56414c49445f5245534f4c564552604082015260600190565b6020808252601a908201527f4d6173746572636f70793a204f4e4c595f5649415f50524f5859000000000000604082015260600190565b6020808252818101527f434d4341646a7564696361746f723a20494e56414c49445f42414c414e434553604082015260600190565b60208082526025908201527f434d4341646a7564696361746f723a20494e56414c49445f5452414e534645526040820152640be9082a6960db1b606082015260800190565b6080810161160f8284612f07565b600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b600060208252611c926020830184612f81565b610180810161160f82846130b0565b815181526020808301519082015260409182015115159181019190915260600190565b600060208252611c92602083018461317e565b600060408252613ed3604083018561317e565b90508260208301529392505050565b90815260200190565b6000808335601e19843603018112613f01578283fd5b8301803591506001600160401b03821115613f1a578283fd5b602090810192508102360382131561275857600080fd5b6000808335601e19843603018112613f47578283fd5b8301803591506001600160401b03821115613f60578283fd5b602001915060808102360382131561275857600080fd5b6040518181016001600160401b0381118282101715613f9557600080fd5b604052919050565b60008235611c9281614070565b6000808335601e19843603018112613fc0578283fd5b83016020810192503590506001600160401b03811115613fdf57600080fd5b60208102360383131561275857600080fd5b6000808335601e19843603018112614007578283fd5b83016020810192503590506001600160401b0381111561402657600080fd5b60808102360383131561275857600080fd5b6001600160a01b031690565b60005b8381101561405f578181015183820152602001614047565b83811115611f8a5750506000910152565b6001600160a01b038116811461408557600080fd5b5056fea2646970667358221220c5423960548445ca21c9acf6a311a5810e68a6e1b07005d68fee57b82562bf9f64736f6c63430007010033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Layne Haber <layne@connext.network>",
    "kind": "dev",
    "methods": {
      "getAlice()": {
        "returns": {
          "_0": "Bob's signer address"
        }
      },
      "getBob()": {
        "returns": {
          "_0": "Alice's signer address"
        }
      },
      "setup(address,address)": {
        "params": {
          "_alice": ": Address representing user with function deposit",
          "_bob": ": Address representing user with multisig deposit"
        }
      },
      "withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)": {
        "params": {
          "aliceSignature": "Signature of owner a",
          "bobSignature": "Signature of owner b",
          "wd": "The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce."
        }
      }
    },
    "title": "TestChannel",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAlice()": {
        "notice": "A getter function for the bob of the multisig"
      },
      "getBob()": {
        "notice": "A getter function for the bob of the multisig"
      },
      "setup(address,address)": {
        "notice": "Contract constructor for Proxied copies"
      }
    },
    "notice": "This contract will help test the `ChannelMastercopy` contract and         the associated bits of functionality. This contract should *only*         contain aliases to internal functions that should be unit-tested,         like the `makeExitable` call on `CMCAsset.sol`. Using this         contract will help reduce the amount of boilerplate needed to test         component functionality. For example, `CMCAsset.sol` is only         able to be tested via the adjudicator in many practical cases.         Creating a helper function allows for easier testing of only         that functionality.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3372,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "lock",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2597,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "alice",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2599,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "bob",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2348,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "totalTransferred",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2354,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "exitableAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2732,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "depositsAlice",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2887,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "isExecuted",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1503,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "channelDispute",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(ChannelDispute)3565_storage"
      },
      {
        "astId": 1507,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "defundNonces",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1511,
        "contract": "src.sol/testing/TestChannel.sol:TestChannel",
        "label": "transferDisputes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_struct(TransferDispute)3572_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(TransferDispute)3572_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ICMCAdjudicator.TransferDispute)",
        "numberOfBytes": "32",
        "value": "t_struct(TransferDispute)3572_storage"
      },
      "t_struct(ChannelDispute)3565_storage": {
        "encoding": "inplace",
        "label": "struct ICMCAdjudicator.ChannelDispute",
        "members": [
          {
            "astId": 3556,
            "contract": "src.sol/testing/TestChannel.sol:TestChannel",
            "label": "channelStateHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3558,
            "contract": "src.sol/testing/TestChannel.sol:TestChannel",
            "label": "nonce",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3560,
            "contract": "src.sol/testing/TestChannel.sol:TestChannel",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 3562,
            "contract": "src.sol/testing/TestChannel.sol:TestChannel",
            "label": "consensusExpiry",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3564,
            "contract": "src.sol/testing/TestChannel.sol:TestChannel",
            "label": "defundExpiry",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TransferDispute)3572_storage": {
        "encoding": "inplace",
        "label": "struct ICMCAdjudicator.TransferDispute",
        "members": [
          {
            "astId": 3567,
            "contract": "src.sol/testing/TestChannel.sol:TestChannel",
            "label": "transferStateHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3569,
            "contract": "src.sol/testing/TestChannel.sol:TestChannel",
            "label": "transferDisputeExpiry",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3571,
            "contract": "src.sol/testing/TestChannel.sol:TestChannel",
            "label": "isDefunded",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}