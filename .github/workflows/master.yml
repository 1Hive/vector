name: Master

on:
  push:
    branches:
      - master

jobs:
  build:
    env:
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make pull-latest
      - run: make all
      - run: bash ops/build-report.sh
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: make push

  test:
    env:
      DOMAINNAME: testnet-vector.connext.network
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: test connection to testnet server
        uses: ./ops/ssh-action/
        with:
          HOST: ubuntu@${{ env.DOMAINNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          CMD: 'echo "Successfully connected to $DOMAINNAME: `hostname`";'

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install mkdocs-material
      - run: cd modules/documentation && mkdocs gh-deploy --force && cd ../..

  utils:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make test-utils

  contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make test-contracts

  protocol:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make test-protocol

  engine:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make test-engine

  server-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make test-server-node

  browser-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make test-browser-node

  router:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make test-router

  global:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make pull-latest
      - run: make global
      - run: make start-global
      - run: make test-global
      - name: Print logs
        if: failure()
        run: docker service logs --tail 200 global_auth

  duet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make pull-latest
      - run: make duet
      - run: make start-duet
      - run: make test-duet
      - name: Print logs
        if: failure()
        run: |
          docker service logs --tail 200 trio_alice
          docker service logs --tail 200 trio_bob

  trio:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make pull-latest
      - run: make trio
      - run: make start-trio
      - run: make test-trio
      - name: Print logs
        if: failure()
        run: |
          docker service logs --tail 200 trio_roger
          docker service logs --tail 200 trio_router
          docker service logs --tail 200 trio_carol
          docker service logs --tail 200 trio_dave

  node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make pull-latest
      - run: make node
      - run: make start-node
      - run: make test-node
      - name: Print logs
        if: failure()
        run: docker service logs --tail 200 node_node

  routing-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make pull-latest
      - run: make router
      - run: make start-router
      - run: make test-routing-node
      - name: Print logs
        if: failure()
        run: |
          docker service logs --tail 200 router_node
          docker service logs --tail 200 router_router

  global-prod:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v1
      - run: make pull
      - run: jq '.production = true' ops/config/global.default.json > global.config.json
      - run: make restart-global
      - run: bash ops/test-integration.sh global
      - name: Print logs
        if: failure()
        run: docker service ls && docker service logs --tail 200 global_auth

  node-prod:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v1
      - run: make pull
      - run: jq '.production = true' ops/config/global.default.json > global.config.json
      - run: jq '.production = true' ops/config/node.default.json > node.config.json
      - run: make restart-node
      - run: bash ops/test-integration.sh node
      - name: Print logs
        if: failure()
        run: docker service ls && docker service logs --tail 200 node_node

  routing-node-prod:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v1
      - run: make pull
      - run: jq '.production = true' ops/config/global.default.json > global.config.json
      - run: jq '.production = true' ops/config/router.default.json > router.config.json
      - run: make restart-router
      - run: bash ops/test-integration.sh router
      - name: Print logs
        if: failure()
        run: docker service ls && docker service logs --tail 200 node_node

  deploy-testnet:
    env:
      DOMAINNAME: testnet-vector.connext.network
      MESSAGING_URL: https://messaging.connext.network
    needs: [ssh, utils, contracts, protocol, engine, server-node, browser-node, router, global, duet, trio, node, routing-node, global-prod, node-prod, routing-node-prod]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: deploy testnet node to prod server
        uses: ./ops/ssh-action/
        with:
          HOST: ubuntu@${{ env.DOMAINNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          CMD: '
            git checkout --force master;
            git reset --hard $GITHUB_SHA;
            make config
            rm -f router.config.json.backup
            mv router.config.json router.config.json.backup
            jq '"'"'
              .production = true |
              .domainName = "'"$DOMAINNAME"'" |
              .messagingUrl = "'"$MESSAGING_URL"'"
            '"'"' router.config.json.backup > router.config.json
            make restart;
            docker container prune -f;
            docker image ls -q | xargs docker image rm || true;
          '
