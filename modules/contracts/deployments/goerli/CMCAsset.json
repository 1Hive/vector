{
  "address": "0x046EB3c71397faE4E26C5c756eBd58618c03d648",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAlice",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBob",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getExitableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "getTotalTransferred",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alice",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bob",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb97adf655d9d581486c5c474f0bde431b50a5f91cd12bd83f739cc6a44ac441",
  "receipt": {
    "to": null,
    "from": "0x6E137983f0B260BAD708b4FAef30cba5a74E69AA",
    "contractAddress": "0x046EB3c71397faE4E26C5c756eBd58618c03d648",
    "transactionIndex": 1,
    "gasUsed": "773546",
    "logsBloom": "0x
    "blockHash": "0x3de5055547264f2b9d7ae5ca86db87b9c2946178f0f0a0d3d22be15d312efedd",
    "transactionHash": "0xfb97adf655d9d581486c5c474f0bde431b50a5f91cd12bd83f739cc6a44ac441",
    "logs": [],
    "blockNumber": 3964951,
    "cumulativeGasUsed": "804295",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e64b9cdf4f72778a3c3a9b0d6a298f3c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAlice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBob\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getExitableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"getTotalTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bob\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Connext <support@connext.network>\",\"kind\":\"dev\",\"methods\":{\"getAlice()\":{\"returns\":{\"_0\":\"Bob's signer address\"}},\"getBob()\":{\"returns\":{\"_0\":\"Alice's signer address\"}},\"setup(address,address)\":{\"params\":{\"_alice\":\": Address representing user with function deposit\",\"_bob\":\": Address representing user with multisig deposit\"}}},\"title\":\"CMCAsset\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAlice()\":{\"notice\":\"A getter function for the bob of the multisig\"},\"getBob()\":{\"notice\":\"A getter function for the bob of the multisig\"},\"setup(address,address)\":{\"notice\":\"Contract constructor for Proxied copies\"}},\"notice\":\"Contains logic to safely transfer channel assets (even if they are         noncompliant). During adjudication, balances from defunding the         channel or defunding transfers are registered as withdrawable. Once         they are registered, the owner (or a watchtower on behalf of the         owner), may call `exit` to reclaim funds from the multisig.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src.sol/CMCAsset.sol\":\"CMCAsset\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"src.sol/CMCAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ICMCAsset.sol\\\";\\nimport \\\"./interfaces/Types.sol\\\";\\nimport \\\"./CMCCore.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"./lib/LibMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title CMCAsset\\n/// @author Connext <support@connext.network>\\n/// @notice Contains logic to safely transfer channel assets (even if they are\\n///         noncompliant). During adjudication, balances from defunding the\\n///         channel or defunding transfers are registered as withdrawable. Once\\n///         they are registered, the owner (or a watchtower on behalf of the\\n///         owner), may call `exit` to reclaim funds from the multisig.\\n\\ncontract CMCAsset is CMCCore, ICMCAsset {\\n    using SafeMath for uint256;\\n    using LibMath for uint256;\\n\\n    mapping(address => uint256) internal totalTransferred;\\n    mapping(address => mapping(address => uint256))\\n        private exitableAmount;\\n\\n    function registerTransfer(address assetId, uint256 amount) internal {\\n        totalTransferred[assetId] += amount;\\n    }\\n\\n    function getTotalTransferred(address assetId)\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (uint256)\\n    {\\n        return totalTransferred[assetId];\\n    }\\n\\n    function makeExitable(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        exitableAmount[assetId][\\n            recipient\\n        ] = exitableAmount[assetId][recipient].satAdd(amount);\\n    }\\n\\n    function makeBalanceExitable(\\n        address assetId,\\n        Balance memory balance\\n    ) internal {\\n        for (uint256 i = 0; i < 2; i++) {\\n            uint256 amount = balance.amount[i];\\n            if (amount > 0) {\\n                makeExitable(assetId, balance.to[i], amount);\\n            }\\n        }\\n    }\\n\\n    function getExitableAmount(address assetId, address owner)\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (uint256)\\n    {\\n        return exitableAmount[assetId][owner];\\n    }\\n\\n    function getAvailableAmount(address assetId, uint256 maxAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Taking the min protects against the case where the multisig\\n        // holds less than the amount that is trying to be withdrawn\\n        // while still allowing the total of the funds to be removed\\n        // without the transaction reverting.\\n        return Math.min(maxAmount, LibAsset.getOwnBalance(assetId));\\n    }\\n\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n        registerTransfer(assetId, amount);\\n        require(\\n            LibAsset.unregisteredTransfer(assetId, recipient, amount),\\n            \\\"CMCAsset: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function exit(\\n        address assetId,\\n        address owner,\\n        address payable recipient\\n    ) external override onlyViaProxy nonReentrant {\\n        // Either the owner must be the recipient, or in control\\n        // of setting the recipient of the funds to whomever they\\n        // choose\\n        require(\\n            msg.sender == owner || owner == recipient,\\n            \\\"CMCAsset: OWNER_MISMATCH\\\"\\n        );\\n\\n        uint256 amount =\\n            getAvailableAmount(\\n                assetId,\\n                exitableAmount[assetId][owner]\\n            );\\n\\n        // Revert if amount is 0\\n        require(amount > 0, \\\"CMCAsset: NO_OP\\\");\\n\\n        // Reduce the amount claimable from the multisig by the owner\\n        exitableAmount[assetId][\\n            owner\\n        ] = exitableAmount[assetId][owner].sub(amount);\\n\\n        // Perform transfer\\n        transferAsset(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x39c1bd81d8ec2a0fa7c23aad683017f5e2ec28a2db43643020649f935b5b74bf\",\"license\":\"UNLICENSED\"},\"src.sol/CMCCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ICMCCore.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\n/// @title CMCCore\\n/// @author Connext <support@connext.network>\\n/// @notice Contains logic pertaining to the participants of a channel,\\n///         including setting and retrieving the participants and the\\n///         mastercopy.\\n\\ncontract CMCCore is ReentrancyGuard, ICMCCore {\\n    address private immutable mastercopyAddress;\\n\\n    address internal alice;\\n    address internal bob;\\n\\n    /// @notice Set invalid participants to block the mastercopy from being used directly\\n    ///         Nonzero address also prevents the mastercopy from being setup\\n    ///         Only setting alice is sufficient, setting bob too wouldn't change anything\\n    constructor() {\\n        mastercopyAddress = address(this);\\n    }\\n\\n    // Prevents us from calling methods directly from the mastercopy contract\\n    modifier onlyViaProxy {\\n        require(\\n            address(this) != mastercopyAddress,\\n            \\\"Mastercopy: ONLY_VIA_PROXY\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Contract constructor for Proxied copies\\n    /// @param _alice: Address representing user with function deposit\\n    /// @param _bob: Address representing user with multisig deposit\\n    function setup(address _alice, address _bob)\\n        external\\n        override\\n        onlyViaProxy\\n    {\\n        require(alice == address(0), \\\"CMCCore: ALREADY_SETUP\\\");\\n        require(\\n            _alice != address(0) && _bob != address(0),\\n            \\\"CMCCore: INVALID_PARTICIPANT\\\"\\n        );\\n        require(_alice != _bob, \\\"CMCCore: IDENTICAL_PARTICIPANTS\\\");\\n        ReentrancyGuard.setup();\\n        alice = _alice;\\n        bob = _bob;\\n    }\\n\\n    /// @notice A getter function for the bob of the multisig\\n    /// @return Bob's signer address\\n    function getAlice()\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (address)\\n    {\\n        return alice;\\n    }\\n\\n    /// @notice A getter function for the bob of the multisig\\n    /// @return Alice's signer address\\n    function getBob()\\n        external\\n        view\\n        override\\n        onlyViaProxy\\n        nonReentrantView\\n        returns (address)\\n    {\\n        return bob;\\n    }\\n}\\n\",\"keccak256\":\"0x37324d80a19f1feb6e413fe6a41d82b5dba38bca62e0e05ae6f420000dd93c53\",\"license\":\"UNLICENSED\"},\"src.sol/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title CMCWithdraw\\n/// @author Connext <support@connext.network>\\n/// @notice A \\\"mutex\\\" reentrancy guard, heavily influenced by OpenZeppelin.\\n\\ncontract ReentrancyGuard {\\n    uint256 private constant OPEN = 1;\\n    uint256 private constant LOCKED = 2;\\n\\n    uint256 public lock;\\n\\n    function setup() internal {\\n        lock = OPEN;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(lock == OPEN, \\\"ReentrancyGuard: REENTRANT_CALL\\\");\\n        lock = LOCKED;\\n        _;\\n        lock = OPEN;\\n    }\\n\\n    modifier nonReentrantView() {\\n        require(lock == OPEN, \\\"ReentrancyGuard: REENTRANT_CALL\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf7adf3f05703e0176d892051633e6ca3291e5a3d7ab769f880c03a0d0849dfa7\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ICMCAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICMCAsset {\\n    function getTotalTransferred(address assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getExitableAmount(address assetId, address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exit(\\n        address assetId,\\n        address owner,\\n        address payable recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/ICMCCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICMCCore {\\n    function setup(address _alice, address _bob) external;\\n\\n    function getAlice() external view returns (address);\\n\\n    function getBob() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\",\"license\":\"UNLICENSED\"},\"src.sol/interfaces/Types.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nstruct Balance {\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\n}\\n\",\"keccak256\":\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\",\"license\":\"UNLICENSED\"},\"src.sol/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibERC20.sol\\\";\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/// @title LibAsset\\n/// @author Connext <support@connext.network>\\n/// @notice This library contains helpers for dealing with onchain transfers\\n///         of in-channel assets. It is designed to safely handle all asset\\n///         transfers out of channel in the event of an onchain dispute. Also\\n///         safely handles ERC20 transfers that may be non-compliant\\nlibrary LibAsset {\\n    address constant ETHER_ASSETID = address(0);\\n\\n    function isEther(address assetId) internal pure returns (bool) {\\n        return assetId == ETHER_ASSETID;\\n    }\\n\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return\\n            isEther(assetId)\\n                ? address(this).balance\\n                : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    function transferEther(address payable recipient, uint256 amount)\\n        internal\\n        returns (bool)\\n    {\\n        (bool success, bytes memory returnData) =\\n            recipient.call{value: amount}(\\\"\\\");\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return true;\\n    }\\n\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return LibERC20.transfer(assetId, recipient, amount);\\n    }\\n\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\n    // both standard-compliant ones as well as tokens that exhibit the\\n    // missing-return-value bug.\\n    // Although it behaves very much like Solidity's `transfer` function\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\n    // because we need to register every transfer out of the channel.\\n    // Therefore, it should normally not be used directly, with the single\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\n    // which combines the \\\"naked\\\" unregistered transfer given below\\n    // with a registration.\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\n    function unregisteredTransfer(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            isEther(assetId)\\n                ? transferEther(recipient, amount)\\n                : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\",\"license\":\"UNLICENSED\"},\"src.sol/lib/LibERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title LibERC20\\n/// @author Connext <support@connext.network>\\n/// @notice This library provides several functions to safely handle\\n///         noncompliant tokens (i.e. does not return a boolean from\\n///         the transfer function)\\n\\nlibrary LibERC20 {\\n    function wrapCall(address assetId, bytes memory callData)\\n        internal\\n        returns (bool)\\n    {\\n        require(Address.isContract(assetId), \\\"LibERC20: NO_CODE\\\");\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\n    }\\n\\n    function approve(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"approve(address,uint256)\\\",\\n                    spender,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transferFrom(\\n        address assetId,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\",\\n                    sender,\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transfer(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\",\"license\":\"UNLICENSED\"},\"src.sol/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title LibMath\\n/// @author Connext <support@connext.network>\\n/// @notice This library allows functions that would otherwise overflow and\\n///         revert if SafeMath was used to instead return the UINT_MAX. In the\\n///         adjudicator, this is used to ensure you can get the majority of\\n///         funds out in the event your balance > UINT_MAX and there is an\\n///         onchain dispute.\\nlibrary LibMath {\\n    /// @dev Returns the maximum uint256 for an addition that would overflow\\n    ///      (saturation arithmetic)\\n    function satAdd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 sum = x + y;\\n        return sum >= x ? sum : type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x1e6307538bfdb12a0f5234db5b9b22365b6abe2b96baa37f2e4b5d2d3f6683b8\",\"license\":\"UNLICENSED\"},\"src.sol/lib/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title LibUtils\\n/// @author Connext <support@connext.network>\\n/// @notice Contains a helper to revert if a call was not successfully\\n///         made\\nlibrary LibUtils {\\n    // If success is false, reverts and passes on the revert string.\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\n        internal\\n        pure\\n    {\\n        if (!success) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5030606081901b608052610d1061004a60003980610118528061019c52806102b2528061042952806104b2528061054b5250610d106000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063cefa51221161005b578063cefa5122146100c8578063e9852569146100e8578063eeb30fea146100fb578063f83d08ba146101035761007d565b8063241686a0146100825780632d34ba79146100a05780635bc9d96d146100b5575b600080fd5b61008a61010b565b6040516100979190610a5b565b60405180910390f35b6100b36100ae366004610982565b610191565b005b6100b36100c33660046109ba565b6102a7565b6100db6100d6366004610966565b61041c565b6040516100979190610c89565b6100db6100f6366004610982565b6104a5565b61008a61053e565b6100db6105bb565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561015f5760405162461bcd60e51b815260040161015690610c52565b60405180910390fd5b6001600054146101815760405162461bcd60e51b815260040161015690610b8b565b506002546001600160a01b031690565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101da5760405162461bcd60e51b815260040161015690610c52565b6001546001600160a01b0316156102035760405162461bcd60e51b815260040161015690610c22565b6001600160a01b0382161580159061022357506001600160a01b03811615155b61023f5760405162461bcd60e51b815260040161015690610b29565b806001600160a01b0316826001600160a01b031614156102715760405162461bcd60e51b815260040161015690610abb565b6102796105c1565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102f05760405162461bcd60e51b815260040161015690610c52565b6001600054146103125760405162461bcd60e51b815260040161015690610b8b565b6002600055336001600160a01b038316148061033f5750806001600160a01b0316826001600160a01b0316145b61035b5760405162461bcd60e51b815260040161015690610beb565b6001600160a01b03808416600090815260046020908152604080832093861683529290529081205461038e9085906105c8565b9050600081116103b05760405162461bcd60e51b815260040161015690610bc2565b6001600160a01b038085166000908152600460209081526040808320938716835292905220546103e090826105e3565b6001600160a01b03808616600090815260046020908152604080832093881683529290522055610411848383610625565b505060016000555050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104675760405162461bcd60e51b815260040161015690610c52565b6001600054146104895760405162461bcd60e51b815260040161015690610b8b565b506001600160a01b031660009081526003602052604090205490565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104f05760405162461bcd60e51b815260040161015690610c52565b6001600054146105125760405162461bcd60e51b815260040161015690610b8b565b506001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105895760405162461bcd60e51b815260040161015690610c52565b6001600054146105ab5760405162461bcd60e51b815260040161015690610b8b565b506001546001600160a01b031690565b60005481565b6001600055565b60006105dc826105d78561065b565b6106f3565b9392505050565b60006105dc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610709565b61062f8382610735565b61063a838383610757565b6106565760405162461bcd60e51b815260040161015690610af2565b505050565b600061066682610788565b6106eb576040516370a0823160e01b81526001600160a01b038316906370a0823190610696903090600401610a5b565b60206040518083038186803b1580156106ae57600080fd5b505afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190610a24565b6106ed565b475b92915050565b600081831061070257816105dc565b5090919050565b6000818484111561072d5760405162461bcd60e51b81526004016101569190610a88565b505050900390565b6001600160a01b03909116600090815260036020526040902080549091019055565b600061076284610788565b61077657610771848484610795565b610780565b61078083836107a2565b949350505050565b6001600160a01b03161590565b600061078084848461081a565b6000806060846001600160a01b0316846040516107be90610a58565b60006040518083038185875af1925050503d80600081146107fb576040519150601f19603f3d011682016040523d82523d6000602084013e610800565b606091505b509150915061080f8282610862565b506001949350505050565b6000610780848484604051602401610833929190610a6f565b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052610873565b8161086f57805160208201fd5b5050565b600061087e8361092d565b61089a5760405162461bcd60e51b815260040161015690610b60565b60006060846001600160a01b0316846040516108b69190610a3c565b6000604051808303816000865af19150503d80600081146108f3576040519150601f19603f3d011682016040523d82523d6000602084013e6108f8565b606091505b50915091506109078282610862565b805115806109245750808060200190518101906109249190610a04565b95945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610780575050151592915050565b600060208284031215610977578081fd5b81356105dc81610cc2565b60008060408385031215610994578081fd5b823561099f81610cc2565b915060208301356109af81610cc2565b809150509250929050565b6000806000606084860312156109ce578081fd5b83356109d981610cc2565b925060208401356109e981610cc2565b915060408401356109f981610cc2565b809150509250925092565b600060208284031215610a15578081fd5b815180151581146105dc578182fd5b600060208284031215610a35578081fd5b5051919050565b60008251610a4e818460208701610c92565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610aa7816040850160208701610c92565b601f01601f19169190910160400192915050565b6020808252601f908201527f434d43436f72653a204944454e544943414c5f5041525449434950414e545300604082015260600190565b60208082526019908201527f434d4341737365743a205452414e534645525f4641494c454400000000000000604082015260600190565b6020808252601c908201527f434d43436f72653a20494e56414c49445f5041525449434950414e5400000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a205245454e5452414e545f43414c4c00604082015260600190565b6020808252600f908201526e0434d4341737365743a204e4f5f4f5608c1b604082015260600190565b60208082526018908201527f434d4341737365743a204f574e45525f4d49534d415443480000000000000000604082015260600190565b6020808252601690820152750434d43436f72653a20414c52454144595f53455455560541b604082015260600190565b6020808252601a908201527f4d6173746572636f70793a204f4e4c595f5649415f50524f5859000000000000604082015260600190565b90815260200190565b60005b83811015610cad578181015183820152602001610c95565b83811115610cbc576000848401525b50505050565b6001600160a01b0381168114610cd757600080fd5b5056fea2646970667358221220a4ebe9893bd73239a3cbe9e70f1a464bdf5a69da62d4539058d08f7cbe81e08d64736f6c63430007010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063cefa51221161005b578063cefa5122146100c8578063e9852569146100e8578063eeb30fea146100fb578063f83d08ba146101035761007d565b8063241686a0146100825780632d34ba79146100a05780635bc9d96d146100b5575b600080fd5b61008a61010b565b6040516100979190610a5b565b60405180910390f35b6100b36100ae366004610982565b610191565b005b6100b36100c33660046109ba565b6102a7565b6100db6100d6366004610966565b61041c565b6040516100979190610c89565b6100db6100f6366004610982565b6104a5565b61008a61053e565b6100db6105bb565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561015f5760405162461bcd60e51b815260040161015690610c52565b60405180910390fd5b6001600054146101815760405162461bcd60e51b815260040161015690610b8b565b506002546001600160a01b031690565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101da5760405162461bcd60e51b815260040161015690610c52565b6001546001600160a01b0316156102035760405162461bcd60e51b815260040161015690610c22565b6001600160a01b0382161580159061022357506001600160a01b03811615155b61023f5760405162461bcd60e51b815260040161015690610b29565b806001600160a01b0316826001600160a01b031614156102715760405162461bcd60e51b815260040161015690610abb565b6102796105c1565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102f05760405162461bcd60e51b815260040161015690610c52565b6001600054146103125760405162461bcd60e51b815260040161015690610b8b565b6002600055336001600160a01b038316148061033f5750806001600160a01b0316826001600160a01b0316145b61035b5760405162461bcd60e51b815260040161015690610beb565b6001600160a01b03808416600090815260046020908152604080832093861683529290529081205461038e9085906105c8565b9050600081116103b05760405162461bcd60e51b815260040161015690610bc2565b6001600160a01b038085166000908152600460209081526040808320938716835292905220546103e090826105e3565b6001600160a01b03808616600090815260046020908152604080832093881683529290522055610411848383610625565b505060016000555050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104675760405162461bcd60e51b815260040161015690610c52565b6001600054146104895760405162461bcd60e51b815260040161015690610b8b565b506001600160a01b031660009081526003602052604090205490565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104f05760405162461bcd60e51b815260040161015690610c52565b6001600054146105125760405162461bcd60e51b815260040161015690610b8b565b506001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105895760405162461bcd60e51b815260040161015690610c52565b6001600054146105ab5760405162461bcd60e51b815260040161015690610b8b565b506001546001600160a01b031690565b60005481565b6001600055565b60006105dc826105d78561065b565b6106f3565b9392505050565b60006105dc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610709565b61062f8382610735565b61063a838383610757565b6106565760405162461bcd60e51b815260040161015690610af2565b505050565b600061066682610788565b6106eb576040516370a0823160e01b81526001600160a01b038316906370a0823190610696903090600401610a5b565b60206040518083038186803b1580156106ae57600080fd5b505afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190610a24565b6106ed565b475b92915050565b600081831061070257816105dc565b5090919050565b6000818484111561072d5760405162461bcd60e51b81526004016101569190610a88565b505050900390565b6001600160a01b03909116600090815260036020526040902080549091019055565b600061076284610788565b61077657610771848484610795565b610780565b61078083836107a2565b949350505050565b6001600160a01b03161590565b600061078084848461081a565b6000806060846001600160a01b0316846040516107be90610a58565b60006040518083038185875af1925050503d80600081146107fb576040519150601f19603f3d011682016040523d82523d6000602084013e610800565b606091505b509150915061080f8282610862565b506001949350505050565b6000610780848484604051602401610833929190610a6f565b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052610873565b8161086f57805160208201fd5b5050565b600061087e8361092d565b61089a5760405162461bcd60e51b815260040161015690610b60565b60006060846001600160a01b0316846040516108b69190610a3c565b6000604051808303816000865af19150503d80600081146108f3576040519150601f19603f3d011682016040523d82523d6000602084013e6108f8565b606091505b50915091506109078282610862565b805115806109245750808060200190518101906109249190610a04565b95945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610780575050151592915050565b600060208284031215610977578081fd5b81356105dc81610cc2565b60008060408385031215610994578081fd5b823561099f81610cc2565b915060208301356109af81610cc2565b809150509250929050565b6000806000606084860312156109ce578081fd5b83356109d981610cc2565b925060208401356109e981610cc2565b915060408401356109f981610cc2565b809150509250925092565b600060208284031215610a15578081fd5b815180151581146105dc578182fd5b600060208284031215610a35578081fd5b5051919050565b60008251610a4e818460208701610c92565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610aa7816040850160208701610c92565b601f01601f19169190910160400192915050565b6020808252601f908201527f434d43436f72653a204944454e544943414c5f5041525449434950414e545300604082015260600190565b60208082526019908201527f434d4341737365743a205452414e534645525f4641494c454400000000000000604082015260600190565b6020808252601c908201527f434d43436f72653a20494e56414c49445f5041525449434950414e5400000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a205245454e5452414e545f43414c4c00604082015260600190565b6020808252600f908201526e0434d4341737365743a204e4f5f4f5608c1b604082015260600190565b60208082526018908201527f434d4341737365743a204f574e45525f4d49534d415443480000000000000000604082015260600190565b6020808252601690820152750434d43436f72653a20414c52454144595f53455455560541b604082015260600190565b6020808252601a908201527f4d6173746572636f70793a204f4e4c595f5649415f50524f5859000000000000604082015260600190565b90815260200190565b60005b83811015610cad578181015183820152602001610c95565b83811115610cbc576000848401525b50505050565b6001600160a01b0381168114610cd757600080fd5b5056fea2646970667358221220a4ebe9893bd73239a3cbe9e70f1a464bdf5a69da62d4539058d08f7cbe81e08d64736f6c63430007010033",
  "devdoc": {
    "author": "Connext <support@connext.network>",
    "kind": "dev",
    "methods": {
      "getAlice()": {
        "returns": {
          "_0": "Bob's signer address"
        }
      },
      "getBob()": {
        "returns": {
          "_0": "Alice's signer address"
        }
      },
      "setup(address,address)": {
        "params": {
          "_alice": ": Address representing user with function deposit",
          "_bob": ": Address representing user with multisig deposit"
        }
      }
    },
    "title": "CMCAsset",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAlice()": {
        "notice": "A getter function for the bob of the multisig"
      },
      "getBob()": {
        "notice": "A getter function for the bob of the multisig"
      },
      "setup(address,address)": {
        "notice": "Contract constructor for Proxied copies"
      }
    },
    "notice": "Contains logic to safely transfer channel assets (even if they are         noncompliant). During adjudication, balances from defunding the         channel or defunding transfers are registered as withdrawable. Once         they are registered, the owner (or a watchtower on behalf of the         owner), may call `exit` to reclaim funds from the multisig.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3372,
        "contract": "src.sol/CMCAsset.sol:CMCAsset",
        "label": "lock",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2597,
        "contract": "src.sol/CMCAsset.sol:CMCAsset",
        "label": "alice",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2599,
        "contract": "src.sol/CMCAsset.sol:CMCAsset",
        "label": "bob",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2348,
        "contract": "src.sol/CMCAsset.sol:CMCAsset",
        "label": "totalTransferred",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2354,
        "contract": "src.sol/CMCAsset.sol:CMCAsset",
        "label": "exitableAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}